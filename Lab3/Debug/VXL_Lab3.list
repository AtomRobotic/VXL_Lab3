
VXL_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d3c  08002d3c  00003d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d60  08002d60  00004040  2**0
                  CONTENTS
  4 .ARM          00000000  08002d60  08002d60  00004040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d60  08002d60  00004040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d60  08002d60  00003d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d64  08002d64  00003d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08002d68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000040  08002da8  00004040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002da8  00004100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087c6  00000000  00000000  00004069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4b  00000000  00000000  0000c82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0000e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081b  00000000  00000000  0000ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017265  00000000  00000000  0000f74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d18d  00000000  00000000  000269b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008273d  00000000  00000000  00033b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b627a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  000b62c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000b8c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d24 	.word	0x08002d24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002d24 	.word	0x08002d24

0800014c <clearAllButtons>:
static int longPressButtonBuffer[NUM_OF_BUTTONS] = { NORMAL_STATE };

int button_flag[NUM_OF_BUTTONS];
int TimeOutForKeyPress[NUM_OF_BUTTONS];

void clearAllButtons() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e011      	b.n	800017c <clearAllButtons+0x30>
		debounceButtonBuffer1[i] = NORMAL_STATE;
 8000158:	4a15      	ldr	r2, [pc, #84]	@ (80001b0 <clearAllButtons+0x64>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		debounceButtonBuffer2[i] = NORMAL_STATE;
 8000162:	4a14      	ldr	r2, [pc, #80]	@ (80001b4 <clearAllButtons+0x68>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buttonBuffer[i] = NORMAL_STATE;
 800016c:	4a12      	ldr	r2, [pc, #72]	@ (80001b8 <clearAllButtons+0x6c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b02      	cmp	r3, #2
 8000180:	ddea      	ble.n	8000158 <clearAllButtons+0xc>
	}
	HAL_GPIO_WritePin(BUTTON_1_GPIO_Port, BUTTON_1_Pin, NORMAL_STATE);
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000188:	480c      	ldr	r0, [pc, #48]	@ (80001bc <clearAllButtons+0x70>)
 800018a:	f001 fdb4 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUTTON_2_GPIO_Port, BUTTON_2_Pin, NORMAL_STATE);
 800018e:	2201      	movs	r2, #1
 8000190:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000194:	4809      	ldr	r0, [pc, #36]	@ (80001bc <clearAllButtons+0x70>)
 8000196:	f001 fdae 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUTTON_3_GPIO_Port, BUTTON_3_Pin, NORMAL_STATE);
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001a0:	4806      	ldr	r0, [pc, #24]	@ (80001bc <clearAllButtons+0x70>)
 80001a2:	f001 fda8 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	20000018 	.word	0x20000018
 80001b8:	20000000 	.word	0x20000000
 80001bc:	40010800 	.word	0x40010800

080001c0 <isButtonPressed>:

int isButtonPressed(int index) {
 80001c0:	b480      	push	{r7}
 80001c2:	b083      	sub	sp, #12
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 80001c8:	4a09      	ldr	r2, [pc, #36]	@ (80001f0 <isButtonPressed+0x30>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d106      	bne.n	80001e2 <isButtonPressed+0x22>
		button_flag[index] = 0;
 80001d4:	4a06      	ldr	r2, [pc, #24]	@ (80001f0 <isButtonPressed+0x30>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2100      	movs	r1, #0
 80001da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001de:	2301      	movs	r3, #1
 80001e0:	e000      	b.n	80001e4 <isButtonPressed+0x24>
	}
	return 0;
 80001e2:	2300      	movs	r3, #0
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	2000005c 	.word	0x2000005c

080001f4 <getKeyInput>:

void subKeyProcess(int index) {
	button_flag[index] = 1;
}

void getKeyInput(void) {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e089      	b.n	8000314 <getKeyInput+0x120>
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000200:	4a49      	ldr	r2, [pc, #292]	@ (8000328 <getKeyInput+0x134>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4948      	ldr	r1, [pc, #288]	@ (800032c <getKeyInput+0x138>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounceButtonBuffer2[i] = buttonBuffer[i];
 8000210:	4a47      	ldr	r2, [pc, #284]	@ (8000330 <getKeyInput+0x13c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4943      	ldr	r1, [pc, #268]	@ (8000328 <getKeyInput+0x134>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Read signal from user
		if (i == 0) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d10b      	bne.n	800023e <getKeyInput+0x4a>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,
 8000226:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800022a:	4842      	ldr	r0, [pc, #264]	@ (8000334 <getKeyInput+0x140>)
 800022c:	f001 fd4c 	bl	8001cc8 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	4619      	mov	r1, r3
 8000234:	4a3e      	ldr	r2, [pc, #248]	@ (8000330 <getKeyInput+0x13c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023c:	e01c      	b.n	8000278 <getKeyInput+0x84>
			BUTTON_1_Pin);
		} else if (i == 1) {
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d10b      	bne.n	800025c <getKeyInput+0x68>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port,
 8000244:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000248:	483a      	ldr	r0, [pc, #232]	@ (8000334 <getKeyInput+0x140>)
 800024a:	f001 fd3d 	bl	8001cc8 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	4619      	mov	r1, r3
 8000252:	4a37      	ldr	r2, [pc, #220]	@ (8000330 <getKeyInput+0x13c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025a:	e00d      	b.n	8000278 <getKeyInput+0x84>
			BUTTON_2_Pin);
		} else if (i == 2) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d10a      	bne.n	8000278 <getKeyInput+0x84>
			buttonBuffer[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port,
 8000262:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000266:	4833      	ldr	r0, [pc, #204]	@ (8000334 <getKeyInput+0x140>)
 8000268:	f001 fd2e 	bl	8001cc8 <HAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	4619      	mov	r1, r3
 8000270:	4a2f      	ldr	r2, [pc, #188]	@ (8000330 <getKeyInput+0x13c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			BUTTON_3_Pin);
		}
		//debouncing step
		if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000278:	4a2c      	ldr	r2, [pc, #176]	@ (800032c <getKeyInput+0x138>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000280:	4929      	ldr	r1, [pc, #164]	@ (8000328 <getKeyInput+0x134>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000288:	429a      	cmp	r2, r3
 800028a:	d140      	bne.n	800030e <getKeyInput+0x11a>
				&& (debounceButtonBuffer2[i] == buttonBuffer[i])) {
 800028c:	4a26      	ldr	r2, [pc, #152]	@ (8000328 <getKeyInput+0x134>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000294:	4926      	ldr	r1, [pc, #152]	@ (8000330 <getKeyInput+0x13c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800029c:	429a      	cmp	r2, r3
 800029e:	d136      	bne.n	800030e <getKeyInput+0x11a>
			if (buttonBuffer[i] != longPressButtonBuffer[i]) {
 80002a0:	4a23      	ldr	r2, [pc, #140]	@ (8000330 <getKeyInput+0x13c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a8:	4923      	ldr	r1, [pc, #140]	@ (8000338 <getKeyInput+0x144>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d018      	beq.n	80002e6 <getKeyInput+0xf2>
				longPressButtonBuffer[i] = buttonBuffer[i];
 80002b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000330 <getKeyInput+0x13c>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002bc:	491e      	ldr	r1, [pc, #120]	@ (8000338 <getKeyInput+0x144>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//when pressed, do subKeyProcess()
				if (buttonBuffer[i] == PRESSED_STATE) {
 80002c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000330 <getKeyInput+0x13c>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d11e      	bne.n	800030e <getKeyInput+0x11a>
					TimeOutForKeyPress[i] = TIME_OUT_FOR_KEY_PRESS;
 80002d0:	4a1a      	ldr	r2, [pc, #104]	@ (800033c <getKeyInput+0x148>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2164      	movs	r1, #100	@ 0x64
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 80002da:	4a19      	ldr	r2, [pc, #100]	@ (8000340 <getKeyInput+0x14c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2101      	movs	r1, #1
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002e4:	e013      	b.n	800030e <getKeyInput+0x11a>
				}
			}

			else {
				TimeOutForKeyPress[i]--;
 80002e6:	4a15      	ldr	r2, [pc, #84]	@ (800033c <getKeyInput+0x148>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	1e5a      	subs	r2, r3, #1
 80002f0:	4912      	ldr	r1, [pc, #72]	@ (800033c <getKeyInput+0x148>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 80002f8:	4a10      	ldr	r2, [pc, #64]	@ (800033c <getKeyInput+0x148>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d104      	bne.n	800030e <getKeyInput+0x11a>
					longPressButtonBuffer[i] = NORMAL_STATE;
 8000304:	4a0c      	ldr	r2, [pc, #48]	@ (8000338 <getKeyInput+0x144>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2101      	movs	r1, #1
 800030a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3301      	adds	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b02      	cmp	r3, #2
 8000318:	f77f af72 	ble.w	8000200 <getKeyInput+0xc>
				}
			}
		}
	}
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000018 	.word	0x20000018
 800032c:	2000000c 	.word	0x2000000c
 8000330:	20000000 	.word	0x20000000
 8000334:	40010800 	.word	0x40010800
 8000338:	20000024 	.word	0x20000024
 800033c:	20000068 	.word	0x20000068
 8000340:	2000005c 	.word	0x2000005c

08000344 <fsm_automatic_run>:

#include "fsm_automatic.h"



void fsm_automatic_run(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	switch (state){
 8000348:	4b5c      	ldr	r3, [pc, #368]	@ (80004bc <fsm_automatic_run+0x178>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b04      	cmp	r3, #4
 800034e:	f200 808e 	bhi.w	800046e <fsm_automatic_run+0x12a>
 8000352:	a201      	add	r2, pc, #4	@ (adr r2, 8000358 <fsm_automatic_run+0x14>)
 8000354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000358:	0800036d 	.word	0x0800036d
 800035c:	0800039f 	.word	0x0800039f
 8000360:	080003cd 	.word	0x080003cd
 8000364:	08000407 	.word	0x08000407
 8000368:	08000435 	.word	0x08000435
	case init:
		setTimer1(greenTime * 1000);
 800036c:	4b54      	ldr	r3, [pc, #336]	@ (80004c0 <fsm_automatic_run+0x17c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000374:	fb02 f303 	mul.w	r3, r2, r3
 8000378:	4618      	mov	r0, r3
 800037a:	f000 ff99 	bl	80012b0 <setTimer1>
		ledModeData = redTime;
 800037e:	4b51      	ldr	r3, [pc, #324]	@ (80004c4 <fsm_automatic_run+0x180>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a51      	ldr	r2, [pc, #324]	@ (80004c8 <fsm_automatic_run+0x184>)
 8000384:	6013      	str	r3, [r2, #0]
		ledValueData = greenTime;
 8000386:	4b4e      	ldr	r3, [pc, #312]	@ (80004c0 <fsm_automatic_run+0x17c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a50      	ldr	r2, [pc, #320]	@ (80004cc <fsm_automatic_run+0x188>)
 800038c:	6013      	str	r3, [r2, #0]
		OnRed_1();
 800038e:	f001 f8db 	bl	8001548 <OnRed_1>
		OnGreen_2();
 8000392:	f001 f947 	bl	8001624 <OnGreen_2>
		state = state1;
 8000396:	4b49      	ldr	r3, [pc, #292]	@ (80004bc <fsm_automatic_run+0x178>)
 8000398:	2201      	movs	r2, #1
 800039a:	601a      	str	r2, [r3, #0]
		break;
 800039c:	e070      	b.n	8000480 <fsm_automatic_run+0x13c>
	case state1:
		if(timer1_flag == 1){
 800039e:	4b4c      	ldr	r3, [pc, #304]	@ (80004d0 <fsm_automatic_run+0x18c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d165      	bne.n	8000472 <fsm_automatic_run+0x12e>
			setTimer1(yellowTime * 1000);
 80003a6:	4b4b      	ldr	r3, [pc, #300]	@ (80004d4 <fsm_automatic_run+0x190>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003ae:	fb02 f303 	mul.w	r3, r2, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 ff7c 	bl	80012b0 <setTimer1>
			OnYellow_2();
 80003b8:	f001 f91e 	bl	80015f8 <OnYellow_2>
			ledValueData = yellowTime;
 80003bc:	4b45      	ldr	r3, [pc, #276]	@ (80004d4 <fsm_automatic_run+0x190>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a42      	ldr	r2, [pc, #264]	@ (80004cc <fsm_automatic_run+0x188>)
 80003c2:	6013      	str	r3, [r2, #0]
			state = state2;
 80003c4:	4b3d      	ldr	r3, [pc, #244]	@ (80004bc <fsm_automatic_run+0x178>)
 80003c6:	2202      	movs	r2, #2
 80003c8:	601a      	str	r2, [r3, #0]
		}
		break;
 80003ca:	e052      	b.n	8000472 <fsm_automatic_run+0x12e>
	case state2:
		if(timer1_flag == 1){
 80003cc:	4b40      	ldr	r3, [pc, #256]	@ (80004d0 <fsm_automatic_run+0x18c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d150      	bne.n	8000476 <fsm_automatic_run+0x132>
			setTimer1(greenTime * 1000);
 80003d4:	4b3a      	ldr	r3, [pc, #232]	@ (80004c0 <fsm_automatic_run+0x17c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003dc:	fb02 f303 	mul.w	r3, r2, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 ff65 	bl	80012b0 <setTimer1>
			OnGreen_1();
 80003e6:	f001 f8db 	bl	80015a0 <OnGreen_1>
			OnRed_2();
 80003ea:	f001 f8ef 	bl	80015cc <OnRed_2>
			ledModeData = greenTime;
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <fsm_automatic_run+0x17c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a35      	ldr	r2, [pc, #212]	@ (80004c8 <fsm_automatic_run+0x184>)
 80003f4:	6013      	str	r3, [r2, #0]
			ledValueData = redTime;
 80003f6:	4b33      	ldr	r3, [pc, #204]	@ (80004c4 <fsm_automatic_run+0x180>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a34      	ldr	r2, [pc, #208]	@ (80004cc <fsm_automatic_run+0x188>)
 80003fc:	6013      	str	r3, [r2, #0]
			state = state3;
 80003fe:	4b2f      	ldr	r3, [pc, #188]	@ (80004bc <fsm_automatic_run+0x178>)
 8000400:	2203      	movs	r2, #3
 8000402:	601a      	str	r2, [r3, #0]
		}
		break;
 8000404:	e037      	b.n	8000476 <fsm_automatic_run+0x132>
	case state3:
		if(timer1_flag == 1){
 8000406:	4b32      	ldr	r3, [pc, #200]	@ (80004d0 <fsm_automatic_run+0x18c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d135      	bne.n	800047a <fsm_automatic_run+0x136>
			setTimer1(yellowTime * 1000);
 800040e:	4b31      	ldr	r3, [pc, #196]	@ (80004d4 <fsm_automatic_run+0x190>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000416:	fb02 f303 	mul.w	r3, r2, r3
 800041a:	4618      	mov	r0, r3
 800041c:	f000 ff48 	bl	80012b0 <setTimer1>
			OnYellow_1();
 8000420:	f001 f8a8 	bl	8001574 <OnYellow_1>
			ledModeData = yellowTime;
 8000424:	4b2b      	ldr	r3, [pc, #172]	@ (80004d4 <fsm_automatic_run+0x190>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a27      	ldr	r2, [pc, #156]	@ (80004c8 <fsm_automatic_run+0x184>)
 800042a:	6013      	str	r3, [r2, #0]
			state = state4;
 800042c:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <fsm_automatic_run+0x178>)
 800042e:	2204      	movs	r2, #4
 8000430:	601a      	str	r2, [r3, #0]
		}
		break;
 8000432:	e022      	b.n	800047a <fsm_automatic_run+0x136>
	case state4:
		if(timer1_flag == 1){
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <fsm_automatic_run+0x18c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d120      	bne.n	800047e <fsm_automatic_run+0x13a>
			setTimer1(greenTime * 1000);
 800043c:	4b20      	ldr	r3, [pc, #128]	@ (80004c0 <fsm_automatic_run+0x17c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000444:	fb02 f303 	mul.w	r3, r2, r3
 8000448:	4618      	mov	r0, r3
 800044a:	f000 ff31 	bl	80012b0 <setTimer1>
			OnRed_1();
 800044e:	f001 f87b 	bl	8001548 <OnRed_1>
			OnGreen_2();
 8000452:	f001 f8e7 	bl	8001624 <OnGreen_2>
			ledModeData = redTime;
 8000456:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <fsm_automatic_run+0x180>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a1b      	ldr	r2, [pc, #108]	@ (80004c8 <fsm_automatic_run+0x184>)
 800045c:	6013      	str	r3, [r2, #0]
			ledValueData = greenTime;
 800045e:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <fsm_automatic_run+0x17c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a1a      	ldr	r2, [pc, #104]	@ (80004cc <fsm_automatic_run+0x188>)
 8000464:	6013      	str	r3, [r2, #0]
			state = state1;
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <fsm_automatic_run+0x178>)
 8000468:	2201      	movs	r2, #1
 800046a:	601a      	str	r2, [r3, #0]
		}
		break;
 800046c:	e007      	b.n	800047e <fsm_automatic_run+0x13a>
	default:
		break;
 800046e:	bf00      	nop
 8000470:	e006      	b.n	8000480 <fsm_automatic_run+0x13c>
		break;
 8000472:	bf00      	nop
 8000474:	e004      	b.n	8000480 <fsm_automatic_run+0x13c>
		break;
 8000476:	bf00      	nop
 8000478:	e002      	b.n	8000480 <fsm_automatic_run+0x13c>
		break;
 800047a:	bf00      	nop
 800047c:	e000      	b.n	8000480 <fsm_automatic_run+0x13c>
		break;
 800047e:	bf00      	nop
	}
	if(timer2_flag == 1){
 8000480:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <fsm_automatic_run+0x194>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d117      	bne.n	80004b8 <fsm_automatic_run+0x174>
		setTimer2(1000);
 8000488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800048c:	f000 ff2c 	bl	80012e8 <setTimer2>
		update7SEG_AB(ledModeData);
 8000490:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <fsm_automatic_run+0x184>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fdb3 	bl	8001000 <update7SEG_AB>
		update7SEG_CD(ledValueData);
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <fsm_automatic_run+0x188>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fdd2 	bl	8001048 <update7SEG_CD>
		ledModeData--;
 80004a4:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <fsm_automatic_run+0x184>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	4a07      	ldr	r2, [pc, #28]	@ (80004c8 <fsm_automatic_run+0x184>)
 80004ac:	6013      	str	r3, [r2, #0]
		ledValueData--;
 80004ae:	4b07      	ldr	r3, [pc, #28]	@ (80004cc <fsm_automatic_run+0x188>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <fsm_automatic_run+0x188>)
 80004b6:	6013      	str	r3, [r2, #0]
	}
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000084 	.word	0x20000084
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	20000090 	.word	0x20000090
 80004c8:	20000094 	.word	0x20000094
 80004cc:	20000098 	.word	0x20000098
 80004d0:	200000e4 	.word	0x200000e4
 80004d4:	20000088 	.word	0x20000088
 80004d8:	200000ec 	.word	0x200000ec

080004dc <fsm_manual_run>:

int newRedTime;
int newYellowTime;
int newGreenTime;

void fsm_manual_run(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	switch(mode){
 80004e0:	4ba2      	ldr	r3, [pc, #648]	@ (800076c <fsm_manual_run+0x290>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	f200 8135 	bhi.w	8000756 <fsm_manual_run+0x27a>
 80004ec:	a201      	add	r2, pc, #4	@ (adr r2, 80004f4 <fsm_manual_run+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	08000505 	.word	0x08000505
 80004f8:	08000541 	.word	0x08000541
 80004fc:	080005e9 	.word	0x080005e9
 8000500:	0800068f 	.word	0x0800068f
	case MODE1:
		fsm_automatic_run();
 8000504:	f7ff ff1e 	bl	8000344 <fsm_automatic_run>
		if(isButtonPressed(BUTTON_1_PRESS) == 1){
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fe59 	bl	80001c0 <isButtonPressed>
 800050e:	4603      	mov	r3, r0
 8000510:	2b01      	cmp	r3, #1
 8000512:	f040 8122 	bne.w	800075a <fsm_manual_run+0x27e>
			setTimer3(500);
 8000516:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800051a:	f000 ff01 	bl	8001320 <setTimer3>
			tempVal = redTime;
 800051e:	4b94      	ldr	r3, [pc, #592]	@ (8000770 <fsm_manual_run+0x294>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a94      	ldr	r2, [pc, #592]	@ (8000774 <fsm_manual_run+0x298>)
 8000524:	6013      	str	r3, [r2, #0]
			ledModeData = MODE2;
 8000526:	4b94      	ldr	r3, [pc, #592]	@ (8000778 <fsm_manual_run+0x29c>)
 8000528:	2202      	movs	r2, #2
 800052a:	601a      	str	r2, [r3, #0]
			ledValueData = redTime;
 800052c:	4b90      	ldr	r3, [pc, #576]	@ (8000770 <fsm_manual_run+0x294>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a92      	ldr	r2, [pc, #584]	@ (800077c <fsm_manual_run+0x2a0>)
 8000532:	6013      	str	r3, [r2, #0]
			mode = MODE2;
 8000534:	4b8d      	ldr	r3, [pc, #564]	@ (800076c <fsm_manual_run+0x290>)
 8000536:	2202      	movs	r2, #2
 8000538:	601a      	str	r2, [r3, #0]
			AllLedOff();
 800053a:	f000 ffe1 	bl	8001500 <AllLedOff>
		}
		break;
 800053e:	e10c      	b.n	800075a <fsm_manual_run+0x27e>
	case MODE2:
		if(timer3_flag == 1){
 8000540:	4b8f      	ldr	r3, [pc, #572]	@ (8000780 <fsm_manual_run+0x2a4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10f      	bne.n	8000568 <fsm_manual_run+0x8c>
			setTimer3(500);
 8000548:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800054c:	f000 fee8 	bl	8001320 <setTimer3>
			BlinkingRedLed();
 8000550:	f001 f87e 	bl	8001650 <BlinkingRedLed>
			update7SEG_AB(ledModeData);
 8000554:	4b88      	ldr	r3, [pc, #544]	@ (8000778 <fsm_manual_run+0x29c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fd51 	bl	8001000 <update7SEG_AB>
			update7SEG_CD(ledValueData);
 800055e:	4b87      	ldr	r3, [pc, #540]	@ (800077c <fsm_manual_run+0x2a0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fd70 	bl	8001048 <update7SEG_CD>
		}
		if(isButtonPressed(BUTTON_1_PRESS) == 1){
 8000568:	2000      	movs	r0, #0
 800056a:	f7ff fe29 	bl	80001c0 <isButtonPressed>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	d113      	bne.n	800059c <fsm_manual_run+0xc0>
			setTimer3(500);
 8000574:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000578:	f000 fed2 	bl	8001320 <setTimer3>
			tempVal = yellowTime;
 800057c:	4b81      	ldr	r3, [pc, #516]	@ (8000784 <fsm_manual_run+0x2a8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a7c      	ldr	r2, [pc, #496]	@ (8000774 <fsm_manual_run+0x298>)
 8000582:	6013      	str	r3, [r2, #0]
			ledModeData = MODE3;
 8000584:	4b7c      	ldr	r3, [pc, #496]	@ (8000778 <fsm_manual_run+0x29c>)
 8000586:	2203      	movs	r2, #3
 8000588:	601a      	str	r2, [r3, #0]
			ledValueData = yellowTime;
 800058a:	4b7e      	ldr	r3, [pc, #504]	@ (8000784 <fsm_manual_run+0x2a8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a7b      	ldr	r2, [pc, #492]	@ (800077c <fsm_manual_run+0x2a0>)
 8000590:	6013      	str	r3, [r2, #0]
			mode = MODE3;
 8000592:	4b76      	ldr	r3, [pc, #472]	@ (800076c <fsm_manual_run+0x290>)
 8000594:	2203      	movs	r2, #3
 8000596:	601a      	str	r2, [r3, #0]
			AllLedOff();
 8000598:	f000 ffb2 	bl	8001500 <AllLedOff>
		}
		if(isButtonPressed(BUTTON_2_PRESS) == 1){
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff fe0f 	bl	80001c0 <isButtonPressed>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d10f      	bne.n	80005c8 <fsm_manual_run+0xec>
			if(tempVal > 99){
 80005a8:	4b72      	ldr	r3, [pc, #456]	@ (8000774 <fsm_manual_run+0x298>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b63      	cmp	r3, #99	@ 0x63
 80005ae:	dd02      	ble.n	80005b6 <fsm_manual_run+0xda>
				tempVal = 1;
 80005b0:	4b70      	ldr	r3, [pc, #448]	@ (8000774 <fsm_manual_run+0x298>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
			}
			tempVal++;
 80005b6:	4b6f      	ldr	r3, [pc, #444]	@ (8000774 <fsm_manual_run+0x298>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	4a6d      	ldr	r2, [pc, #436]	@ (8000774 <fsm_manual_run+0x298>)
 80005be:	6013      	str	r3, [r2, #0]
			ledValueData = tempVal;
 80005c0:	4b6c      	ldr	r3, [pc, #432]	@ (8000774 <fsm_manual_run+0x298>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a6d      	ldr	r2, [pc, #436]	@ (800077c <fsm_manual_run+0x2a0>)
 80005c6:	6013      	str	r3, [r2, #0]
		}
		if(isButtonPressed(BUTTON_3_PRESS) == 1){
 80005c8:	2002      	movs	r0, #2
 80005ca:	f7ff fdf9 	bl	80001c0 <isButtonPressed>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	f040 80c4 	bne.w	800075e <fsm_manual_run+0x282>
			newRedTime = tempVal;
 80005d6:	4b67      	ldr	r3, [pc, #412]	@ (8000774 <fsm_manual_run+0x298>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a6b      	ldr	r2, [pc, #428]	@ (8000788 <fsm_manual_run+0x2ac>)
 80005dc:	6013      	str	r3, [r2, #0]
			ledValueData = newRedTime;
 80005de:	4b6a      	ldr	r3, [pc, #424]	@ (8000788 <fsm_manual_run+0x2ac>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a66      	ldr	r2, [pc, #408]	@ (800077c <fsm_manual_run+0x2a0>)
 80005e4:	6013      	str	r3, [r2, #0]
		}
		break;
 80005e6:	e0ba      	b.n	800075e <fsm_manual_run+0x282>
	case MODE3:
		if(timer3_flag == 1){
 80005e8:	4b65      	ldr	r3, [pc, #404]	@ (8000780 <fsm_manual_run+0x2a4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d10f      	bne.n	8000610 <fsm_manual_run+0x134>
			setTimer3(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f4:	f000 fe94 	bl	8001320 <setTimer3>
			BlinkingYellowLed();
 80005f8:	f001 f838 	bl	800166c <BlinkingYellowLed>
			update7SEG_AB(ledModeData);
 80005fc:	4b5e      	ldr	r3, [pc, #376]	@ (8000778 <fsm_manual_run+0x29c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fcfd 	bl	8001000 <update7SEG_AB>
			update7SEG_CD(ledValueData);
 8000606:	4b5d      	ldr	r3, [pc, #372]	@ (800077c <fsm_manual_run+0x2a0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fd1c 	bl	8001048 <update7SEG_CD>
		}
		if(isButtonPressed(BUTTON_1_PRESS) == 1){
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff fdd5 	bl	80001c0 <isButtonPressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d113      	bne.n	8000644 <fsm_manual_run+0x168>
			setTimer3(500);
 800061c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000620:	f000 fe7e 	bl	8001320 <setTimer3>
			tempVal = greenTime;
 8000624:	4b59      	ldr	r3, [pc, #356]	@ (800078c <fsm_manual_run+0x2b0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a52      	ldr	r2, [pc, #328]	@ (8000774 <fsm_manual_run+0x298>)
 800062a:	6013      	str	r3, [r2, #0]
			ledModeData = MODE4;
 800062c:	4b52      	ldr	r3, [pc, #328]	@ (8000778 <fsm_manual_run+0x29c>)
 800062e:	2204      	movs	r2, #4
 8000630:	601a      	str	r2, [r3, #0]
			ledValueData = greenTime;
 8000632:	4b56      	ldr	r3, [pc, #344]	@ (800078c <fsm_manual_run+0x2b0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a51      	ldr	r2, [pc, #324]	@ (800077c <fsm_manual_run+0x2a0>)
 8000638:	6013      	str	r3, [r2, #0]
			mode = MODE4;
 800063a:	4b4c      	ldr	r3, [pc, #304]	@ (800076c <fsm_manual_run+0x290>)
 800063c:	2204      	movs	r2, #4
 800063e:	601a      	str	r2, [r3, #0]
			AllLedOff();
 8000640:	f000 ff5e 	bl	8001500 <AllLedOff>
		}
		if(isButtonPressed(BUTTON_2_PRESS) == 1){
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff fdbb 	bl	80001c0 <isButtonPressed>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	d10f      	bne.n	8000670 <fsm_manual_run+0x194>
			if(tempVal > 99){
 8000650:	4b48      	ldr	r3, [pc, #288]	@ (8000774 <fsm_manual_run+0x298>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b63      	cmp	r3, #99	@ 0x63
 8000656:	dd02      	ble.n	800065e <fsm_manual_run+0x182>
				tempVal = 1;
 8000658:	4b46      	ldr	r3, [pc, #280]	@ (8000774 <fsm_manual_run+0x298>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
			}
			tempVal++;
 800065e:	4b45      	ldr	r3, [pc, #276]	@ (8000774 <fsm_manual_run+0x298>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a43      	ldr	r2, [pc, #268]	@ (8000774 <fsm_manual_run+0x298>)
 8000666:	6013      	str	r3, [r2, #0]
			ledValueData = tempVal;
 8000668:	4b42      	ldr	r3, [pc, #264]	@ (8000774 <fsm_manual_run+0x298>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a43      	ldr	r2, [pc, #268]	@ (800077c <fsm_manual_run+0x2a0>)
 800066e:	6013      	str	r3, [r2, #0]
		}
		if(isButtonPressed(BUTTON_3_PRESS) == 1){
 8000670:	2002      	movs	r0, #2
 8000672:	f7ff fda5 	bl	80001c0 <isButtonPressed>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d172      	bne.n	8000762 <fsm_manual_run+0x286>
			newYellowTime = tempVal;
 800067c:	4b3d      	ldr	r3, [pc, #244]	@ (8000774 <fsm_manual_run+0x298>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a43      	ldr	r2, [pc, #268]	@ (8000790 <fsm_manual_run+0x2b4>)
 8000682:	6013      	str	r3, [r2, #0]
			ledValueData = newYellowTime;
 8000684:	4b42      	ldr	r3, [pc, #264]	@ (8000790 <fsm_manual_run+0x2b4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <fsm_manual_run+0x2a0>)
 800068a:	6013      	str	r3, [r2, #0]
		}
		break;
 800068c:	e069      	b.n	8000762 <fsm_manual_run+0x286>
	case MODE4:
		if(timer3_flag == 1){
 800068e:	4b3c      	ldr	r3, [pc, #240]	@ (8000780 <fsm_manual_run+0x2a4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d10f      	bne.n	80006b6 <fsm_manual_run+0x1da>
			setTimer3(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069a:	f000 fe41 	bl	8001320 <setTimer3>
			BlinkingGreenLed();
 800069e:	f000 fff3 	bl	8001688 <BlinkingGreenLed>
			update7SEG_AB(ledModeData);
 80006a2:	4b35      	ldr	r3, [pc, #212]	@ (8000778 <fsm_manual_run+0x29c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fcaa 	bl	8001000 <update7SEG_AB>
			update7SEG_CD(ledValueData);
 80006ac:	4b33      	ldr	r3, [pc, #204]	@ (800077c <fsm_manual_run+0x2a0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fcc9 	bl	8001048 <update7SEG_CD>
		}
		if(isButtonPressed(BUTTON_1_PRESS) == 1){
 80006b6:	2000      	movs	r0, #0
 80006b8:	f7ff fd82 	bl	80001c0 <isButtonPressed>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d10f      	bne.n	80006e2 <fsm_manual_run+0x206>
			state = init;
 80006c2:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <fsm_manual_run+0x2b8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
			setTimer3(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f000 fe28 	bl	8001320 <setTimer3>
			setTimer1(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 fded 	bl	80012b0 <setTimer1>
			setTimer2(10);
 80006d6:	200a      	movs	r0, #10
 80006d8:	f000 fe06 	bl	80012e8 <setTimer2>
			mode = MODE1;
 80006dc:	4b23      	ldr	r3, [pc, #140]	@ (800076c <fsm_manual_run+0x290>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(BUTTON_2_PRESS) == 1){
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff fd6c 	bl	80001c0 <isButtonPressed>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d10f      	bne.n	800070e <fsm_manual_run+0x232>
			if(tempVal > 99){
 80006ee:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <fsm_manual_run+0x298>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b63      	cmp	r3, #99	@ 0x63
 80006f4:	dd02      	ble.n	80006fc <fsm_manual_run+0x220>
				tempVal = 1;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <fsm_manual_run+0x298>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	601a      	str	r2, [r3, #0]
			}
			tempVal++;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <fsm_manual_run+0x298>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <fsm_manual_run+0x298>)
 8000704:	6013      	str	r3, [r2, #0]
			ledValueData = tempVal;
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <fsm_manual_run+0x298>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <fsm_manual_run+0x2a0>)
 800070c:	6013      	str	r3, [r2, #0]
		}
		if(isButtonPressed(BUTTON_3_PRESS) == 1){
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff fd56 	bl	80001c0 <isButtonPressed>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d125      	bne.n	8000766 <fsm_manual_run+0x28a>
			newGreenTime = tempVal;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <fsm_manual_run+0x298>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a1e      	ldr	r2, [pc, #120]	@ (8000798 <fsm_manual_run+0x2bc>)
 8000720:	6013      	str	r3, [r2, #0]
			ledValueData = newGreenTime;
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <fsm_manual_run+0x2bc>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a15      	ldr	r2, [pc, #84]	@ (800077c <fsm_manual_run+0x2a0>)
 8000728:	6013      	str	r3, [r2, #0]
			if(newRedTime == newGreenTime + newYellowTime){
 800072a:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <fsm_manual_run+0x2bc>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <fsm_manual_run+0x2b4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	441a      	add	r2, r3
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <fsm_manual_run+0x2ac>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d114      	bne.n	8000766 <fsm_manual_run+0x28a>
				redTime = newRedTime;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <fsm_manual_run+0x2ac>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <fsm_manual_run+0x294>)
 8000742:	6013      	str	r3, [r2, #0]
				yellowTime = newYellowTime;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <fsm_manual_run+0x2b4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <fsm_manual_run+0x2a8>)
 800074a:	6013      	str	r3, [r2, #0]
				greenTime = newGreenTime;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <fsm_manual_run+0x2bc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <fsm_manual_run+0x2b0>)
 8000752:	6013      	str	r3, [r2, #0]
			}
		}
		break;
 8000754:	e007      	b.n	8000766 <fsm_manual_run+0x28a>
	default:
		break;
 8000756:	bf00      	nop
 8000758:	e006      	b.n	8000768 <fsm_manual_run+0x28c>
		break;
 800075a:	bf00      	nop
 800075c:	e004      	b.n	8000768 <fsm_manual_run+0x28c>
		break;
 800075e:	bf00      	nop
 8000760:	e002      	b.n	8000768 <fsm_manual_run+0x28c>
		break;
 8000762:	bf00      	nop
 8000764:	e000      	b.n	8000768 <fsm_manual_run+0x28c>
		break;
 8000766:	bf00      	nop
	}
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000030 	.word	0x20000030
 8000770:	20000090 	.word	0x20000090
 8000774:	20000074 	.word	0x20000074
 8000778:	20000094 	.word	0x20000094
 800077c:	20000098 	.word	0x20000098
 8000780:	200000f4 	.word	0x200000f4
 8000784:	20000088 	.word	0x20000088
 8000788:	20000078 	.word	0x20000078
 800078c:	2000008c 	.word	0x2000008c
 8000790:	2000007c 	.word	0x2000007c
 8000794:	20000084 	.word	0x20000084
 8000798:	20000080 	.word	0x20000080

0800079c <initValues>:
int redTime;

int ledModeData;
int ledValueData;

void initValues() {
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	yellowTime = YELLOW_TIME;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <initValues+0x30>)
 80007a2:	2202      	movs	r2, #2
 80007a4:	601a      	str	r2, [r3, #0]
	greenTime = GREEN_TIME;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <initValues+0x34>)
 80007a8:	2203      	movs	r2, #3
 80007aa:	601a      	str	r2, [r3, #0]
	redTime = RED_TIME;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <initValues+0x38>)
 80007ae:	2205      	movs	r2, #5
 80007b0:	601a      	str	r2, [r3, #0]
	ledModeData = redTime;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <initValues+0x38>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <initValues+0x3c>)
 80007b8:	6013      	str	r3, [r2, #0]
	ledValueData = greenTime;
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <initValues+0x34>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <initValues+0x40>)
 80007c0:	6013      	str	r3, [r2, #0]
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000088 	.word	0x20000088
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	20000090 	.word	0x20000090
 80007d8:	20000094 	.word	0x20000094
 80007dc:	20000098 	.word	0x20000098

080007e0 <display_SEG_A>:
 *      Author: ADMIN
 */

#include "led_displayer.h"

void display_SEG_A(int counter) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d113      	bne.n	8000816 <display_SEG_A+0x36>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	4872      	ldr	r0, [pc, #456]	@ (80009bc <display_SEG_A+0x1dc>)
 80007f4:	f001 fa7f 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2102      	movs	r1, #2
 80007fc:	486f      	ldr	r0, [pc, #444]	@ (80009bc <display_SEG_A+0x1dc>)
 80007fe:	f001 fa7a 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2104      	movs	r1, #4
 8000806:	486d      	ldr	r0, [pc, #436]	@ (80009bc <display_SEG_A+0x1dc>)
 8000808:	f001 fa75 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2108      	movs	r1, #8
 8000810:	486a      	ldr	r0, [pc, #424]	@ (80009bc <display_SEG_A+0x1dc>)
 8000812:	f001 fa70 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d113      	bne.n	8000844 <display_SEG_A+0x64>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2101      	movs	r1, #1
 8000820:	4866      	ldr	r0, [pc, #408]	@ (80009bc <display_SEG_A+0x1dc>)
 8000822:	f001 fa68 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2102      	movs	r1, #2
 800082a:	4864      	ldr	r0, [pc, #400]	@ (80009bc <display_SEG_A+0x1dc>)
 800082c:	f001 fa63 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2104      	movs	r1, #4
 8000834:	4861      	ldr	r0, [pc, #388]	@ (80009bc <display_SEG_A+0x1dc>)
 8000836:	f001 fa5e 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2108      	movs	r1, #8
 800083e:	485f      	ldr	r0, [pc, #380]	@ (80009bc <display_SEG_A+0x1dc>)
 8000840:	f001 fa59 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d113      	bne.n	8000872 <display_SEG_A+0x92>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2101      	movs	r1, #1
 800084e:	485b      	ldr	r0, [pc, #364]	@ (80009bc <display_SEG_A+0x1dc>)
 8000850:	f001 fa51 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2102      	movs	r1, #2
 8000858:	4858      	ldr	r0, [pc, #352]	@ (80009bc <display_SEG_A+0x1dc>)
 800085a:	f001 fa4c 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2104      	movs	r1, #4
 8000862:	4856      	ldr	r0, [pc, #344]	@ (80009bc <display_SEG_A+0x1dc>)
 8000864:	f001 fa47 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2108      	movs	r1, #8
 800086c:	4853      	ldr	r0, [pc, #332]	@ (80009bc <display_SEG_A+0x1dc>)
 800086e:	f001 fa42 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b03      	cmp	r3, #3
 8000876:	d113      	bne.n	80008a0 <display_SEG_A+0xc0>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2101      	movs	r1, #1
 800087c:	484f      	ldr	r0, [pc, #316]	@ (80009bc <display_SEG_A+0x1dc>)
 800087e:	f001 fa3a 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2102      	movs	r1, #2
 8000886:	484d      	ldr	r0, [pc, #308]	@ (80009bc <display_SEG_A+0x1dc>)
 8000888:	f001 fa35 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	484a      	ldr	r0, [pc, #296]	@ (80009bc <display_SEG_A+0x1dc>)
 8000892:	f001 fa30 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2108      	movs	r1, #8
 800089a:	4848      	ldr	r0, [pc, #288]	@ (80009bc <display_SEG_A+0x1dc>)
 800089c:	f001 fa2b 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d113      	bne.n	80008ce <display_SEG_A+0xee>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2101      	movs	r1, #1
 80008aa:	4844      	ldr	r0, [pc, #272]	@ (80009bc <display_SEG_A+0x1dc>)
 80008ac:	f001 fa23 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2102      	movs	r1, #2
 80008b4:	4841      	ldr	r0, [pc, #260]	@ (80009bc <display_SEG_A+0x1dc>)
 80008b6:	f001 fa1e 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2104      	movs	r1, #4
 80008be:	483f      	ldr	r0, [pc, #252]	@ (80009bc <display_SEG_A+0x1dc>)
 80008c0:	f001 fa19 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	483c      	ldr	r0, [pc, #240]	@ (80009bc <display_SEG_A+0x1dc>)
 80008ca:	f001 fa14 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d113      	bne.n	80008fc <display_SEG_A+0x11c>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	4838      	ldr	r0, [pc, #224]	@ (80009bc <display_SEG_A+0x1dc>)
 80008da:	f001 fa0c 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2102      	movs	r1, #2
 80008e2:	4836      	ldr	r0, [pc, #216]	@ (80009bc <display_SEG_A+0x1dc>)
 80008e4:	f001 fa07 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2104      	movs	r1, #4
 80008ec:	4833      	ldr	r0, [pc, #204]	@ (80009bc <display_SEG_A+0x1dc>)
 80008ee:	f001 fa02 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	4831      	ldr	r0, [pc, #196]	@ (80009bc <display_SEG_A+0x1dc>)
 80008f8:	f001 f9fd 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d113      	bne.n	800092a <display_SEG_A+0x14a>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2101      	movs	r1, #1
 8000906:	482d      	ldr	r0, [pc, #180]	@ (80009bc <display_SEG_A+0x1dc>)
 8000908:	f001 f9f5 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2102      	movs	r1, #2
 8000910:	482a      	ldr	r0, [pc, #168]	@ (80009bc <display_SEG_A+0x1dc>)
 8000912:	f001 f9f0 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2104      	movs	r1, #4
 800091a:	4828      	ldr	r0, [pc, #160]	@ (80009bc <display_SEG_A+0x1dc>)
 800091c:	f001 f9eb 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2108      	movs	r1, #8
 8000924:	4825      	ldr	r0, [pc, #148]	@ (80009bc <display_SEG_A+0x1dc>)
 8000926:	f001 f9e6 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b07      	cmp	r3, #7
 800092e:	d113      	bne.n	8000958 <display_SEG_A+0x178>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	4821      	ldr	r0, [pc, #132]	@ (80009bc <display_SEG_A+0x1dc>)
 8000936:	f001 f9de 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	481f      	ldr	r0, [pc, #124]	@ (80009bc <display_SEG_A+0x1dc>)
 8000940:	f001 f9d9 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2104      	movs	r1, #4
 8000948:	481c      	ldr	r0, [pc, #112]	@ (80009bc <display_SEG_A+0x1dc>)
 800094a:	f001 f9d4 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2108      	movs	r1, #8
 8000952:	481a      	ldr	r0, [pc, #104]	@ (80009bc <display_SEG_A+0x1dc>)
 8000954:	f001 f9cf 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b08      	cmp	r3, #8
 800095c:	d113      	bne.n	8000986 <display_SEG_A+0x1a6>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2101      	movs	r1, #1
 8000962:	4816      	ldr	r0, [pc, #88]	@ (80009bc <display_SEG_A+0x1dc>)
 8000964:	f001 f9c7 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2102      	movs	r1, #2
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <display_SEG_A+0x1dc>)
 800096e:	f001 f9c2 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2104      	movs	r1, #4
 8000976:	4811      	ldr	r0, [pc, #68]	@ (80009bc <display_SEG_A+0x1dc>)
 8000978:	f001 f9bd 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2108      	movs	r1, #8
 8000980:	480e      	ldr	r0, [pc, #56]	@ (80009bc <display_SEG_A+0x1dc>)
 8000982:	f001 f9b8 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b09      	cmp	r3, #9
 800098a:	d113      	bne.n	80009b4 <display_SEG_A+0x1d4>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	480a      	ldr	r0, [pc, #40]	@ (80009bc <display_SEG_A+0x1dc>)
 8000992:	f001 f9b0 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	4808      	ldr	r0, [pc, #32]	@ (80009bc <display_SEG_A+0x1dc>)
 800099c:	f001 f9ab 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <display_SEG_A+0x1dc>)
 80009a6:	f001 f9a6 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2108      	movs	r1, #8
 80009ae:	4803      	ldr	r0, [pc, #12]	@ (80009bc <display_SEG_A+0x1dc>)
 80009b0:	f001 f9a1 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010c00 	.word	0x40010c00

080009c0 <display_SEG_B>:

void display_SEG_B(int counter) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d113      	bne.n	80009f6 <display_SEG_B+0x36>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2110      	movs	r1, #16
 80009d2:	4872      	ldr	r0, [pc, #456]	@ (8000b9c <display_SEG_B+0x1dc>)
 80009d4:	f001 f98f 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	486f      	ldr	r0, [pc, #444]	@ (8000b9c <display_SEG_B+0x1dc>)
 80009de:	f001 f98a 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	486d      	ldr	r0, [pc, #436]	@ (8000b9c <display_SEG_B+0x1dc>)
 80009e8:	f001 f985 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	486a      	ldr	r0, [pc, #424]	@ (8000b9c <display_SEG_B+0x1dc>)
 80009f2:	f001 f980 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d113      	bne.n	8000a24 <display_SEG_B+0x64>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	4866      	ldr	r0, [pc, #408]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a02:	f001 f978 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4864      	ldr	r0, [pc, #400]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a0c:	f001 f973 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2140      	movs	r1, #64	@ 0x40
 8000a14:	4861      	ldr	r0, [pc, #388]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a16:	f001 f96e 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	485f      	ldr	r0, [pc, #380]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a20:	f001 f969 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d113      	bne.n	8000a52 <display_SEG_B+0x92>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	485b      	ldr	r0, [pc, #364]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a30:	f001 f961 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2120      	movs	r1, #32
 8000a38:	4858      	ldr	r0, [pc, #352]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a3a:	f001 f95c 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2140      	movs	r1, #64	@ 0x40
 8000a42:	4856      	ldr	r0, [pc, #344]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a44:	f001 f957 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2180      	movs	r1, #128	@ 0x80
 8000a4c:	4853      	ldr	r0, [pc, #332]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a4e:	f001 f952 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d113      	bne.n	8000a80 <display_SEG_B+0xc0>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	484f      	ldr	r0, [pc, #316]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a5e:	f001 f94a 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	484d      	ldr	r0, [pc, #308]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a68:	f001 f945 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2140      	movs	r1, #64	@ 0x40
 8000a70:	484a      	ldr	r0, [pc, #296]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a72:	f001 f940 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2180      	movs	r1, #128	@ 0x80
 8000a7a:	4848      	ldr	r0, [pc, #288]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a7c:	f001 f93b 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d113      	bne.n	8000aae <display_SEG_B+0xee>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2110      	movs	r1, #16
 8000a8a:	4844      	ldr	r0, [pc, #272]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a8c:	f001 f933 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2120      	movs	r1, #32
 8000a94:	4841      	ldr	r0, [pc, #260]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000a96:	f001 f92e 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	@ 0x40
 8000a9e:	483f      	ldr	r0, [pc, #252]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000aa0:	f001 f929 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	@ 0x80
 8000aa8:	483c      	ldr	r0, [pc, #240]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000aaa:	f001 f924 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b05      	cmp	r3, #5
 8000ab2:	d113      	bne.n	8000adc <display_SEG_B+0x11c>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4838      	ldr	r0, [pc, #224]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000aba:	f001 f91c 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4836      	ldr	r0, [pc, #216]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000ac4:	f001 f917 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2140      	movs	r1, #64	@ 0x40
 8000acc:	4833      	ldr	r0, [pc, #204]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000ace:	f001 f912 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2180      	movs	r1, #128	@ 0x80
 8000ad6:	4831      	ldr	r0, [pc, #196]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000ad8:	f001 f90d 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d113      	bne.n	8000b0a <display_SEG_B+0x14a>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	482d      	ldr	r0, [pc, #180]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000ae8:	f001 f905 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2120      	movs	r1, #32
 8000af0:	482a      	ldr	r0, [pc, #168]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000af2:	f001 f900 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2140      	movs	r1, #64	@ 0x40
 8000afa:	4828      	ldr	r0, [pc, #160]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000afc:	f001 f8fb 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2180      	movs	r1, #128	@ 0x80
 8000b04:	4825      	ldr	r0, [pc, #148]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b06:	f001 f8f6 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b07      	cmp	r3, #7
 8000b0e:	d113      	bne.n	8000b38 <display_SEG_B+0x178>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4821      	ldr	r0, [pc, #132]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b16:	f001 f8ee 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	481f      	ldr	r0, [pc, #124]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b20:	f001 f8e9 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2140      	movs	r1, #64	@ 0x40
 8000b28:	481c      	ldr	r0, [pc, #112]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b2a:	f001 f8e4 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2180      	movs	r1, #128	@ 0x80
 8000b32:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b34:	f001 f8df 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d113      	bne.n	8000b66 <display_SEG_B+0x1a6>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2110      	movs	r1, #16
 8000b42:	4816      	ldr	r0, [pc, #88]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b44:	f001 f8d7 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2120      	movs	r1, #32
 8000b4c:	4813      	ldr	r0, [pc, #76]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b4e:	f001 f8d2 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b58:	f001 f8cd 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2180      	movs	r1, #128	@ 0x80
 8000b60:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b62:	f001 f8c8 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b09      	cmp	r3, #9
 8000b6a:	d113      	bne.n	8000b94 <display_SEG_B+0x1d4>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2110      	movs	r1, #16
 8000b70:	480a      	ldr	r0, [pc, #40]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b72:	f001 f8c0 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b7c:	f001 f8bb 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	@ 0x40
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b86:	f001 f8b6 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <display_SEG_B+0x1dc>)
 8000b90:	f001 f8b1 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <display_SEG_C>:

void display_SEG_C(int counter) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d117      	bne.n	8000bde <display_SEG_C+0x3e>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb4:	4885      	ldr	r0, [pc, #532]	@ (8000dcc <display_SEG_C+0x22c>)
 8000bb6:	f001 f89e 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	4882      	ldr	r0, [pc, #520]	@ (8000dcc <display_SEG_C+0x22c>)
 8000bc2:	f001 f898 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bcc:	487f      	ldr	r0, [pc, #508]	@ (8000dcc <display_SEG_C+0x22c>)
 8000bce:	f001 f892 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd8:	487c      	ldr	r0, [pc, #496]	@ (8000dcc <display_SEG_C+0x22c>)
 8000bda:	f001 f88c 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d117      	bne.n	8000c14 <display_SEG_C+0x74>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bea:	4878      	ldr	r0, [pc, #480]	@ (8000dcc <display_SEG_C+0x22c>)
 8000bec:	f001 f883 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf6:	4875      	ldr	r0, [pc, #468]	@ (8000dcc <display_SEG_C+0x22c>)
 8000bf8:	f001 f87d 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c02:	4872      	ldr	r0, [pc, #456]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c04:	f001 f877 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c0e:	486f      	ldr	r0, [pc, #444]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c10:	f001 f871 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d117      	bne.n	8000c4a <display_SEG_C+0xaa>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	486a      	ldr	r0, [pc, #424]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c22:	f001 f868 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c2c:	4867      	ldr	r0, [pc, #412]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c2e:	f001 f862 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c38:	4864      	ldr	r0, [pc, #400]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c3a:	f001 f85c 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c44:	4861      	ldr	r0, [pc, #388]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c46:	f001 f856 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d117      	bne.n	8000c80 <display_SEG_C+0xe0>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c56:	485d      	ldr	r0, [pc, #372]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c58:	f001 f84d 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c62:	485a      	ldr	r0, [pc, #360]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c64:	f001 f847 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c6e:	4857      	ldr	r0, [pc, #348]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c70:	f001 f841 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c7a:	4854      	ldr	r0, [pc, #336]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c7c:	f001 f83b 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d117      	bne.n	8000cb6 <display_SEG_C+0x116>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c8c:	484f      	ldr	r0, [pc, #316]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c8e:	f001 f832 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c98:	484c      	ldr	r0, [pc, #304]	@ (8000dcc <display_SEG_C+0x22c>)
 8000c9a:	f001 f82c 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ca4:	4849      	ldr	r0, [pc, #292]	@ (8000dcc <display_SEG_C+0x22c>)
 8000ca6:	f001 f826 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cb0:	4846      	ldr	r0, [pc, #280]	@ (8000dcc <display_SEG_C+0x22c>)
 8000cb2:	f001 f820 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b05      	cmp	r3, #5
 8000cba:	d117      	bne.n	8000cec <display_SEG_C+0x14c>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc2:	4842      	ldr	r0, [pc, #264]	@ (8000dcc <display_SEG_C+0x22c>)
 8000cc4:	f001 f817 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cce:	483f      	ldr	r0, [pc, #252]	@ (8000dcc <display_SEG_C+0x22c>)
 8000cd0:	f001 f811 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cda:	483c      	ldr	r0, [pc, #240]	@ (8000dcc <display_SEG_C+0x22c>)
 8000cdc:	f001 f80b 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ce6:	4839      	ldr	r0, [pc, #228]	@ (8000dcc <display_SEG_C+0x22c>)
 8000ce8:	f001 f805 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d117      	bne.n	8000d22 <display_SEG_C+0x182>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf8:	4834      	ldr	r0, [pc, #208]	@ (8000dcc <display_SEG_C+0x22c>)
 8000cfa:	f000 fffc 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d04:	4831      	ldr	r0, [pc, #196]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d06:	f000 fff6 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d10:	482e      	ldr	r0, [pc, #184]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d12:	f000 fff0 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d1c:	482b      	ldr	r0, [pc, #172]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d1e:	f000 ffea 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b07      	cmp	r3, #7
 8000d26:	d117      	bne.n	8000d58 <display_SEG_C+0x1b8>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2e:	4827      	ldr	r0, [pc, #156]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d30:	f000 ffe1 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d3a:	4824      	ldr	r0, [pc, #144]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d3c:	f000 ffdb 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d46:	4821      	ldr	r0, [pc, #132]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d48:	f000 ffd5 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d52:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d54:	f000 ffcf 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d117      	bne.n	8000d8e <display_SEG_C+0x1ee>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d64:	4819      	ldr	r0, [pc, #100]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d66:	f000 ffc6 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d70:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d72:	f000 ffc0 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d7c:	4813      	ldr	r0, [pc, #76]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d7e:	f000 ffba 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d88:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d8a:	f000 ffb4 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b09      	cmp	r3, #9
 8000d92:	d117      	bne.n	8000dc4 <display_SEG_C+0x224>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d9a:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <display_SEG_C+0x22c>)
 8000d9c:	f000 ffab 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da6:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <display_SEG_C+0x22c>)
 8000da8:	f000 ffa5 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <display_SEG_C+0x22c>)
 8000db4:	f000 ff9f 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dbe:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <display_SEG_C+0x22c>)
 8000dc0:	f000 ff99 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <display_SEG_D>:

void display_SEG_D(int counter) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d117      	bne.n	8000e0e <display_SEG_D+0x3e>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de4:	4885      	ldr	r0, [pc, #532]	@ (8000ffc <display_SEG_D+0x22c>)
 8000de6:	f000 ff86 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df0:	4882      	ldr	r0, [pc, #520]	@ (8000ffc <display_SEG_D+0x22c>)
 8000df2:	f000 ff80 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfc:	487f      	ldr	r0, [pc, #508]	@ (8000ffc <display_SEG_D+0x22c>)
 8000dfe:	f000 ff7a 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e08:	487c      	ldr	r0, [pc, #496]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e0a:	f000 ff74 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d117      	bne.n	8000e44 <display_SEG_D+0x74>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1a:	4878      	ldr	r0, [pc, #480]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e1c:	f000 ff6b 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e26:	4875      	ldr	r0, [pc, #468]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e28:	f000 ff65 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e32:	4872      	ldr	r0, [pc, #456]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e34:	f000 ff5f 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e3e:	486f      	ldr	r0, [pc, #444]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e40:	f000 ff59 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d117      	bne.n	8000e7a <display_SEG_D+0xaa>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e50:	486a      	ldr	r0, [pc, #424]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e52:	f000 ff50 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e5c:	4867      	ldr	r0, [pc, #412]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e5e:	f000 ff4a 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e68:	4864      	ldr	r0, [pc, #400]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e6a:	f000 ff44 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e74:	4861      	ldr	r0, [pc, #388]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e76:	f000 ff3e 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d117      	bne.n	8000eb0 <display_SEG_D+0xe0>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	485d      	ldr	r0, [pc, #372]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e88:	f000 ff35 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e92:	485a      	ldr	r0, [pc, #360]	@ (8000ffc <display_SEG_D+0x22c>)
 8000e94:	f000 ff2f 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e9e:	4857      	ldr	r0, [pc, #348]	@ (8000ffc <display_SEG_D+0x22c>)
 8000ea0:	f000 ff29 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eaa:	4854      	ldr	r0, [pc, #336]	@ (8000ffc <display_SEG_D+0x22c>)
 8000eac:	f000 ff23 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d117      	bne.n	8000ee6 <display_SEG_D+0x116>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ebc:	484f      	ldr	r0, [pc, #316]	@ (8000ffc <display_SEG_D+0x22c>)
 8000ebe:	f000 ff1a 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec8:	484c      	ldr	r0, [pc, #304]	@ (8000ffc <display_SEG_D+0x22c>)
 8000eca:	f000 ff14 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ed4:	4849      	ldr	r0, [pc, #292]	@ (8000ffc <display_SEG_D+0x22c>)
 8000ed6:	f000 ff0e 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee0:	4846      	ldr	r0, [pc, #280]	@ (8000ffc <display_SEG_D+0x22c>)
 8000ee2:	f000 ff08 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d117      	bne.n	8000f1c <display_SEG_D+0x14c>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef2:	4842      	ldr	r0, [pc, #264]	@ (8000ffc <display_SEG_D+0x22c>)
 8000ef4:	f000 feff 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efe:	483f      	ldr	r0, [pc, #252]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f00:	f000 fef9 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f0a:	483c      	ldr	r0, [pc, #240]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f0c:	f000 fef3 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f16:	4839      	ldr	r0, [pc, #228]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f18:	f000 feed 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d117      	bne.n	8000f52 <display_SEG_D+0x182>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f28:	4834      	ldr	r0, [pc, #208]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f2a:	f000 fee4 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f34:	4831      	ldr	r0, [pc, #196]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f36:	f000 fede 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f40:	482e      	ldr	r0, [pc, #184]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f42:	f000 fed8 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f4c:	482b      	ldr	r0, [pc, #172]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f4e:	f000 fed2 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b07      	cmp	r3, #7
 8000f56:	d117      	bne.n	8000f88 <display_SEG_D+0x1b8>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f5e:	4827      	ldr	r0, [pc, #156]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f60:	f000 fec9 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	4824      	ldr	r0, [pc, #144]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f6c:	f000 fec3 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f76:	4821      	ldr	r0, [pc, #132]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f78:	f000 febd 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f82:	481e      	ldr	r0, [pc, #120]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f84:	f000 feb7 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d117      	bne.n	8000fbe <display_SEG_D+0x1ee>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f94:	4819      	ldr	r0, [pc, #100]	@ (8000ffc <display_SEG_D+0x22c>)
 8000f96:	f000 feae 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa0:	4816      	ldr	r0, [pc, #88]	@ (8000ffc <display_SEG_D+0x22c>)
 8000fa2:	f000 fea8 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fac:	4813      	ldr	r0, [pc, #76]	@ (8000ffc <display_SEG_D+0x22c>)
 8000fae:	f000 fea2 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb8:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <display_SEG_D+0x22c>)
 8000fba:	f000 fe9c 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d117      	bne.n	8000ff4 <display_SEG_D+0x224>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fca:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <display_SEG_D+0x22c>)
 8000fcc:	f000 fe93 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <display_SEG_D+0x22c>)
 8000fd8:	f000 fe8d 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe2:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <display_SEG_D+0x22c>)
 8000fe4:	f000 fe87 	bl	8001cf6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fee:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <display_SEG_D+0x22c>)
 8000ff0:	f000 fe81 	bl	8001cf6 <HAL_GPIO_WritePin>
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <update7SEG_AB>:

void update7SEG_AB(int data){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	display_SEG_A(data / 10);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <update7SEG_AB+0x44>)
 800100c:	fb82 1203 	smull	r1, r2, r2, r3
 8001010:	1092      	asrs	r2, r2, #2
 8001012:	17db      	asrs	r3, r3, #31
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fbe2 	bl	80007e0 <display_SEG_A>
	display_SEG_B(data % 10);
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <update7SEG_AB+0x44>)
 8001020:	fb83 1302 	smull	r1, r3, r3, r2
 8001024:	1099      	asrs	r1, r3, #2
 8001026:	17d3      	asrs	r3, r2, #31
 8001028:	1ac9      	subs	r1, r1, r3
 800102a:	460b      	mov	r3, r1
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	1ad1      	subs	r1, r2, r3
 8001034:	4608      	mov	r0, r1
 8001036:	f7ff fcc3 	bl	80009c0 <display_SEG_B>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	66666667 	.word	0x66666667

08001048 <update7SEG_CD>:

void update7SEG_CD(int data){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	display_SEG_C(data / 10);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <update7SEG_CD+0x44>)
 8001054:	fb82 1203 	smull	r1, r2, r2, r3
 8001058:	1092      	asrs	r2, r2, #2
 800105a:	17db      	asrs	r3, r3, #31
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd9e 	bl	8000ba0 <display_SEG_C>
	display_SEG_D(data % 10);
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <update7SEG_CD+0x44>)
 8001068:	fb83 1302 	smull	r1, r3, r3, r2
 800106c:	1099      	asrs	r1, r3, #2
 800106e:	17d3      	asrs	r3, r2, #31
 8001070:	1ac9      	subs	r1, r1, r3
 8001072:	460b      	mov	r3, r1
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	1ad1      	subs	r1, r2, r3
 800107c:	4608      	mov	r0, r1
 800107e:	f7ff fea7 	bl	8000dd0 <display_SEG_D>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	66666667 	.word	0x66666667

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f000 fb2c 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f81a 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 f8a0 	bl	80011e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010a0:	f000 f852 	bl	8001148 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010a4:	4809      	ldr	r0, [pc, #36]	@ (80010cc <main+0x3c>)
 80010a6:	f001 fa85 	bl	80025b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f000 f900 	bl	80012b0 <setTimer1>
  setTimer2(10);
 80010b0:	200a      	movs	r0, #10
 80010b2:	f000 f919 	bl	80012e8 <setTimer2>
  setTimer3(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 f932 	bl	8001320 <setTimer3>
  clearAllButtons();
 80010bc:	f7ff f846 	bl	800014c <clearAllButtons>
  initValues();
 80010c0:	f7ff fb6c 	bl	800079c <initValues>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_manual_run();
 80010c4:	f7ff fa0a 	bl	80004dc <fsm_manual_run>
 80010c8:	e7fc      	b.n	80010c4 <main+0x34>
 80010ca:	bf00      	nop
 80010cc:	2000009c 	.word	0x2000009c

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b090      	sub	sp, #64	@ 0x40
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	2228      	movs	r2, #40	@ 0x28
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fdf4 	bl	8002ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fa:	2310      	movs	r3, #16
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fe26 	bl	8001d58 <HAL_RCC_OscConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001112:	f000 f8c7 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f001 f894 	bl	800225c <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800113a:	f000 f8b3 	bl	80012a4 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3740      	adds	r7, #64	@ 0x40
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_TIM2_Init+0x94>)
 8001166:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800116c:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <MX_TIM2_Init+0x94>)
 800116e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001172:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <MX_TIM2_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <MX_TIM2_Init+0x94>)
 800117c:	2209      	movs	r2, #9
 800117e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <MX_TIM2_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_TIM2_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800118c:	4813      	ldr	r0, [pc, #76]	@ (80011dc <MX_TIM2_Init+0x94>)
 800118e:	f001 f9c1 	bl	8002514 <HAL_TIM_Base_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001198:	f000 f884 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4619      	mov	r1, r3
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <MX_TIM2_Init+0x94>)
 80011aa:	f001 fb3f 	bl	800282c <HAL_TIM_ConfigClockSource>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011b4:	f000 f876 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_TIM2_Init+0x94>)
 80011c6:	f001 fd17 	bl	8002bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f868 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000009c 	.word	0x2000009c

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <MX_GPIO_Init+0xa0>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <MX_GPIO_Init+0xa0>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_GPIO_Init+0xa0>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_GPIO_Init+0xa0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <MX_GPIO_Init+0xa0>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_GPIO_Init+0xa0>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001224:	2200      	movs	r2, #0
 8001226:	f24e 017e 	movw	r1, #57470	@ 0xe07e
 800122a:	4816      	ldr	r0, [pc, #88]	@ (8001284 <MX_GPIO_Init+0xa4>)
 800122c:	f000 fd63 	bl	8001cf6 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|BUTTON_1_Pin|BUTTON_2_Pin
                          |BUTTON_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_1_Pin|SEG_A_2_Pin|SEG_A_3_Pin|SEG_C_3_Pin
 8001230:	2200      	movs	r2, #0
 8001232:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001236:	4814      	ldr	r0, [pc, #80]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001238:	f000 fd5d 	bl	8001cf6 <HAL_GPIO_WritePin>
                          |SEG_B_3_Pin|SEG_B_4_Pin|SEG_C_1_Pin|SEG_C_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin BUTTON_1_Pin BUTTON_2_Pin
                           BUTTON_3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 800123c:	f24e 037e 	movw	r3, #57470	@ 0xe07e
 8001240:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|BUTTON_1_Pin|BUTTON_2_Pin
                          |BUTTON_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2302      	movs	r3, #2
 800124c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <MX_GPIO_Init+0xa4>)
 8001256:	f000 fbbb 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_1_Pin SEG_A_2_Pin SEG_A_3_Pin SEG_C_3_Pin
                           SEG_C_4_Pin SEG_D_1_Pin SEG_D_2_Pin SEG_D_3_Pin
                           SEG_D_4_Pin SEG_A_4_Pin SEG_B_1_Pin SEG_B_2_Pin
                           SEG_B_3_Pin SEG_B_4_Pin SEG_C_1_Pin SEG_C_2_Pin */
  GPIO_InitStruct.Pin = SEG_A_1_Pin|SEG_A_2_Pin|SEG_A_3_Pin|SEG_C_3_Pin
 800125a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800125e:	60bb      	str	r3, [r7, #8]
                          |SEG_C_4_Pin|SEG_D_1_Pin|SEG_D_2_Pin|SEG_D_3_Pin
                          |SEG_D_4_Pin|SEG_A_4_Pin|SEG_B_1_Pin|SEG_B_2_Pin
                          |SEG_B_3_Pin|SEG_B_4_Pin|SEG_C_1_Pin|SEG_C_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_GPIO_Init+0xa8>)
 8001274:	f000 fbac 	bl	80019d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	40010800 	.word	0x40010800
 8001288:	40010c00 	.word	0x40010c00

0800128c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	timerRun();
 8001294:	f000 f860 	bl	8001358 <timerRun>
	getKeyInput();
 8001298:	f7fe ffac 	bl	80001f4 <getKeyInput>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <setTimer1>:
int timer2_counter = 0;

int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration) {
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <setTimer1+0x2c>)
 80012bc:	fb82 1203 	smull	r1, r2, r2, r3
 80012c0:	1092      	asrs	r2, r2, #2
 80012c2:	17db      	asrs	r3, r3, #31
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	4a06      	ldr	r2, [pc, #24]	@ (80012e0 <setTimer1+0x30>)
 80012c8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <setTimer1+0x34>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	66666667 	.word	0x66666667
 80012e0:	200000e8 	.word	0x200000e8
 80012e4:	200000e4 	.word	0x200000e4

080012e8 <setTimer2>:

void setTimer2(int duration) {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <setTimer2+0x2c>)
 80012f4:	fb82 1203 	smull	r1, r2, r2, r3
 80012f8:	1092      	asrs	r2, r2, #2
 80012fa:	17db      	asrs	r3, r3, #31
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	4a06      	ldr	r2, [pc, #24]	@ (8001318 <setTimer2+0x30>)
 8001300:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <setTimer2+0x34>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	66666667 	.word	0x66666667
 8001318:	200000f0 	.word	0x200000f0
 800131c:	200000ec 	.word	0x200000ec

08001320 <setTimer3>:

void setTimer3(int duration) {
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <setTimer3+0x2c>)
 800132c:	fb82 1203 	smull	r1, r2, r2, r3
 8001330:	1092      	asrs	r2, r2, #2
 8001332:	17db      	asrs	r3, r3, #31
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <setTimer3+0x30>)
 8001338:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <setTimer3+0x34>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	66666667 	.word	0x66666667
 8001350:	200000f8 	.word	0x200000f8
 8001354:	200000f4 	.word	0x200000f4

08001358 <timerRun>:

void timerRun() {
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <timerRun+0x6c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	dd0b      	ble.n	800137c <timerRun+0x24>
		timer1_counter--;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <timerRun+0x6c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	4a16      	ldr	r2, [pc, #88]	@ (80013c4 <timerRun+0x6c>)
 800136c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <timerRun+0x6c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <timerRun+0x24>
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <timerRun+0x70>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]
	}

	if (timer2_counter > 0) {
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <timerRun+0x74>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dd0b      	ble.n	800139c <timerRun+0x44>
		timer2_counter--;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <timerRun+0x74>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <timerRun+0x74>)
 800138c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <timerRun+0x74>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <timerRun+0x44>
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <timerRun+0x78>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
	}

	if (timer3_counter > 0) {
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <timerRun+0x7c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd0b      	ble.n	80013bc <timerRun+0x64>
		timer3_counter--;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <timerRun+0x7c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <timerRun+0x7c>)
 80013ac:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <timerRun+0x7c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <timerRun+0x64>
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <timerRun+0x80>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
	}
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	200000e8 	.word	0x200000e8
 80013c8:	200000e4 	.word	0x200000e4
 80013cc:	200000f0 	.word	0x200000f0
 80013d0:	200000ec 	.word	0x200000ec
 80013d4:	200000f8 	.word	0x200000f8
 80013d8:	200000f4 	.word	0x200000f4

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <HAL_MspInit+0x5c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <HAL_MspInit+0x5c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_MspInit+0x60>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_MspInit+0x60>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001450:	d113      	bne.n	800147a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_TIM_Base_MspInit+0x44>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	201c      	movs	r0, #28
 8001470:	f000 fa77 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001474:	201c      	movs	r0, #28
 8001476:	f000 fa90 	bl	800199a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <NMI_Handler+0x4>

08001490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <MemManage_Handler+0x4>

080014a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <UsageFault_Handler+0x4>

080014b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f950 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <TIM2_IRQHandler+0x10>)
 80014e6:	f001 f8b1 	bl	800264c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000009c 	.word	0x2000009c

080014f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <AllLedOff>:
 */


#include "traffic_light.h"

void AllLedOff(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2102      	movs	r1, #2
 8001508:	480e      	ldr	r0, [pc, #56]	@ (8001544 <AllLedOff+0x44>)
 800150a:	f000 fbf4 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800150e:	2201      	movs	r2, #1
 8001510:	2104      	movs	r1, #4
 8001512:	480c      	ldr	r0, [pc, #48]	@ (8001544 <AllLedOff+0x44>)
 8001514:	f000 fbef 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2108      	movs	r1, #8
 800151c:	4809      	ldr	r0, [pc, #36]	@ (8001544 <AllLedOff+0x44>)
 800151e:	f000 fbea 	bl	8001cf6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2110      	movs	r1, #16
 8001526:	4807      	ldr	r0, [pc, #28]	@ (8001544 <AllLedOff+0x44>)
 8001528:	f000 fbe5 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800152c:	2201      	movs	r2, #1
 800152e:	2120      	movs	r1, #32
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <AllLedOff+0x44>)
 8001532:	f000 fbe0 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	4802      	ldr	r0, [pc, #8]	@ (8001544 <AllLedOff+0x44>)
 800153c:	f000 fbdb 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40010800 	.word	0x40010800

08001548 <OnRed_1>:

void OnRed_1(){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2102      	movs	r1, #2
 8001550:	4807      	ldr	r0, [pc, #28]	@ (8001570 <OnRed_1+0x28>)
 8001552:	f000 fbd0 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2104      	movs	r1, #4
 800155a:	4805      	ldr	r0, [pc, #20]	@ (8001570 <OnRed_1+0x28>)
 800155c:	f000 fbcb 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2108      	movs	r1, #8
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <OnRed_1+0x28>)
 8001566:	f000 fbc6 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40010800 	.word	0x40010800

08001574 <OnYellow_1>:

void OnYellow_1(){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2102      	movs	r1, #2
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <OnYellow_1+0x28>)
 800157e:	f000 fbba 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	2104      	movs	r1, #4
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <OnYellow_1+0x28>)
 8001588:	f000 fbb5 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2108      	movs	r1, #8
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <OnYellow_1+0x28>)
 8001592:	f000 fbb0 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010800 	.word	0x40010800

080015a0 <OnGreen_1>:

void OnGreen_1(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2102      	movs	r1, #2
 80015a8:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <OnGreen_1+0x28>)
 80015aa:	f000 fba4 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2104      	movs	r1, #4
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <OnGreen_1+0x28>)
 80015b4:	f000 fb9f 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2108      	movs	r1, #8
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <OnGreen_1+0x28>)
 80015be:	f000 fb9a 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40010800 	.word	0x40010800

080015cc <OnRed_2>:

void OnRed_2(){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	4807      	ldr	r0, [pc, #28]	@ (80015f4 <OnRed_2+0x28>)
 80015d6:	f000 fb8e 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	2120      	movs	r1, #32
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <OnRed_2+0x28>)
 80015e0:	f000 fb89 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2140      	movs	r1, #64	@ 0x40
 80015e8:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <OnRed_2+0x28>)
 80015ea:	f000 fb84 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40010800 	.word	0x40010800

080015f8 <OnYellow_2>:

void OnYellow_2(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2110      	movs	r1, #16
 8001600:	4807      	ldr	r0, [pc, #28]	@ (8001620 <OnYellow_2+0x28>)
 8001602:	f000 fb78 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2120      	movs	r1, #32
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <OnYellow_2+0x28>)
 800160c:	f000 fb73 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001610:	2201      	movs	r2, #1
 8001612:	2140      	movs	r1, #64	@ 0x40
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <OnYellow_2+0x28>)
 8001616:	f000 fb6e 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40010800 	.word	0x40010800

08001624 <OnGreen_2>:

void OnGreen_2(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2110      	movs	r1, #16
 800162c:	4807      	ldr	r0, [pc, #28]	@ (800164c <OnGreen_2+0x28>)
 800162e:	f000 fb62 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2120      	movs	r1, #32
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <OnGreen_2+0x28>)
 8001638:	f000 fb5d 	bl	8001cf6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	2140      	movs	r1, #64	@ 0x40
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <OnGreen_2+0x28>)
 8001642:	f000 fb58 	bl	8001cf6 <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010800 	.word	0x40010800

08001650 <BlinkingRedLed>:

void BlinkingRedLed(){
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8001654:	2102      	movs	r1, #2
 8001656:	4804      	ldr	r0, [pc, #16]	@ (8001668 <BlinkingRedLed+0x18>)
 8001658:	f000 fb65 	bl	8001d26 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800165c:	2110      	movs	r1, #16
 800165e:	4802      	ldr	r0, [pc, #8]	@ (8001668 <BlinkingRedLed+0x18>)
 8001660:	f000 fb61 	bl	8001d26 <HAL_GPIO_TogglePin>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010800 	.word	0x40010800

0800166c <BlinkingYellowLed>:

void BlinkingYellowLed(){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8001670:	2104      	movs	r1, #4
 8001672:	4804      	ldr	r0, [pc, #16]	@ (8001684 <BlinkingYellowLed+0x18>)
 8001674:	f000 fb57 	bl	8001d26 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8001678:	2120      	movs	r1, #32
 800167a:	4802      	ldr	r0, [pc, #8]	@ (8001684 <BlinkingYellowLed+0x18>)
 800167c:	f000 fb53 	bl	8001d26 <HAL_GPIO_TogglePin>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40010800 	.word	0x40010800

08001688 <BlinkingGreenLed>:

void BlinkingGreenLed(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800168c:	2108      	movs	r1, #8
 800168e:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <BlinkingGreenLed+0x18>)
 8001690:	f000 fb49 	bl	8001d26 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8001694:	2140      	movs	r1, #64	@ 0x40
 8001696:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <BlinkingGreenLed+0x18>)
 8001698:	f000 fb45 	bl	8001d26 <HAL_GPIO_TogglePin>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010800 	.word	0x40010800

080016a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a4:	f7ff ff26 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016aa:	490c      	ldr	r1, [pc, #48]	@ (80016dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016ac:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016c0:	4c09      	ldr	r4, [pc, #36]	@ (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f001 fb05 	bl	8002cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016d2:	f7ff fcdd 	bl	8001090 <main>
  bx lr
 80016d6:	4770      	bx	lr
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80016e0:	08002d68 	.word	0x08002d68
  ldr r2, =_sbss
 80016e4:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80016e8:	20000100 	.word	0x20000100

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_Init+0x28>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <HAL_Init+0x28>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f923 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	200f      	movs	r0, #15
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fe66 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f93b 	bl	80019b6 <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f903 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000034 	.word	0x20000034
 8001774:	2000003c 	.word	0x2000003c
 8001778:	20000038 	.word	0x20000038

0800177c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_IncTick+0x1c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_IncTick+0x20>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a03      	ldr	r2, [pc, #12]	@ (800179c <HAL_IncTick+0x20>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	2000003c 	.word	0x2000003c
 800179c:	200000fc 	.word	0x200000fc

080017a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b02      	ldr	r3, [pc, #8]	@ (80017b0 <HAL_GetTick+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	200000fc 	.word	0x200000fc

080017b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <__NVIC_GetPriorityGrouping+0x18>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	f003 0307 	and.w	r3, r3, #7
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	db0b      	blt.n	8001842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	4906      	ldr	r1, [pc, #24]	@ (800184c <__NVIC_EnableIRQ+0x34>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	2001      	movs	r0, #1
 800183a:	fa00 f202 	lsl.w	r2, r0, r2
 800183e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	@ (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff90 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff2d 	bl	80017b4 <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff42 	bl	80017fc <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff90 	bl	80018a4 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5f 	bl	8001850 <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff35 	bl	8001818 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b08b      	sub	sp, #44	@ 0x2c
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e161      	b.n	8001ca8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e4:	2201      	movs	r2, #1
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8150 	bne.w	8001ca2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a97      	ldr	r2, [pc, #604]	@ (8001c64 <HAL_GPIO_Init+0x294>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d05e      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a0c:	4a95      	ldr	r2, [pc, #596]	@ (8001c64 <HAL_GPIO_Init+0x294>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d875      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a12:	4a95      	ldr	r2, [pc, #596]	@ (8001c68 <HAL_GPIO_Init+0x298>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d058      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a18:	4a93      	ldr	r2, [pc, #588]	@ (8001c68 <HAL_GPIO_Init+0x298>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d86f      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a1e:	4a93      	ldr	r2, [pc, #588]	@ (8001c6c <HAL_GPIO_Init+0x29c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d052      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a24:	4a91      	ldr	r2, [pc, #580]	@ (8001c6c <HAL_GPIO_Init+0x29c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d869      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a2a:	4a91      	ldr	r2, [pc, #580]	@ (8001c70 <HAL_GPIO_Init+0x2a0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d04c      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a30:	4a8f      	ldr	r2, [pc, #572]	@ (8001c70 <HAL_GPIO_Init+0x2a0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d863      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a36:	4a8f      	ldr	r2, [pc, #572]	@ (8001c74 <HAL_GPIO_Init+0x2a4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d046      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a3c:	4a8d      	ldr	r2, [pc, #564]	@ (8001c74 <HAL_GPIO_Init+0x2a4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d85d      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d82a      	bhi.n	8001a9c <HAL_GPIO_Init+0xcc>
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d859      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a50 <HAL_GPIO_Init+0x80>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001acb 	.word	0x08001acb
 8001a54:	08001aa5 	.word	0x08001aa5
 8001a58:	08001ab7 	.word	0x08001ab7
 8001a5c:	08001af9 	.word	0x08001af9
 8001a60:	08001aff 	.word	0x08001aff
 8001a64:	08001aff 	.word	0x08001aff
 8001a68:	08001aff 	.word	0x08001aff
 8001a6c:	08001aff 	.word	0x08001aff
 8001a70:	08001aff 	.word	0x08001aff
 8001a74:	08001aff 	.word	0x08001aff
 8001a78:	08001aff 	.word	0x08001aff
 8001a7c:	08001aff 	.word	0x08001aff
 8001a80:	08001aff 	.word	0x08001aff
 8001a84:	08001aff 	.word	0x08001aff
 8001a88:	08001aff 	.word	0x08001aff
 8001a8c:	08001aff 	.word	0x08001aff
 8001a90:	08001aff 	.word	0x08001aff
 8001a94:	08001aad 	.word	0x08001aad
 8001a98:	08001ac1 	.word	0x08001ac1
 8001a9c:	4a76      	ldr	r2, [pc, #472]	@ (8001c78 <HAL_GPIO_Init+0x2a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aa2:	e02c      	b.n	8001afe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e029      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e024      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	3308      	adds	r3, #8
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e01f      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	330c      	adds	r3, #12
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e01a      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	623b      	str	r3, [r7, #32]
          break;
 8001ad6:	e013      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	611a      	str	r2, [r3, #16]
          break;
 8001aea:	e009      	b.n	8001b00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aec:	2308      	movs	r3, #8
 8001aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	615a      	str	r2, [r3, #20]
          break;
 8001af6:	e003      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          break;
 8001afe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	@ 0xff
 8001b04:	d801      	bhi.n	8001b0a <HAL_GPIO_Init+0x13a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_Init+0x13e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	@ 0xff
 8001b14:	d802      	bhi.n	8001b1c <HAL_GPIO_Init+0x14c>
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x152>
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	3b08      	subs	r3, #8
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	210f      	movs	r1, #15
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	6a39      	ldr	r1, [r7, #32]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80a9 	beq.w	8001ca2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b50:	4b4a      	ldr	r3, [pc, #296]	@ (8001c7c <HAL_GPIO_Init+0x2ac>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a49      	ldr	r2, [pc, #292]	@ (8001c7c <HAL_GPIO_Init+0x2ac>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b47      	ldr	r3, [pc, #284]	@ (8001c7c <HAL_GPIO_Init+0x2ac>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b68:	4a45      	ldr	r2, [pc, #276]	@ (8001c80 <HAL_GPIO_Init+0x2b0>)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c84 <HAL_GPIO_Init+0x2b4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3c      	ldr	r2, [pc, #240]	@ (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1dc>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c8c <HAL_GPIO_Init+0x2bc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1d8>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e004      	b.n	8001bb2 <HAL_GPIO_Init+0x1e2>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x1e2>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_GPIO_Init+0x1e2>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bc2:	492f      	ldr	r1, [pc, #188]	@ (8001c80 <HAL_GPIO_Init+0x2b0>)
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	492b      	ldr	r1, [pc, #172]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bea:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4927      	ldr	r1, [pc, #156]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	4921      	ldr	r1, [pc, #132]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c12:	4b1f      	ldr	r3, [pc, #124]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	491d      	ldr	r1, [pc, #116]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d006      	beq.n	8001c3a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c2c:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4917      	ldr	r1, [pc, #92]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	4913      	ldr	r1, [pc, #76]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01f      	beq.n	8001c94 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	490d      	ldr	r1, [pc, #52]	@ (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	e01f      	b.n	8001ca2 <HAL_GPIO_Init+0x2d2>
 8001c62:	bf00      	nop
 8001c64:	10320000 	.word	0x10320000
 8001c68:	10310000 	.word	0x10310000
 8001c6c:	10220000 	.word	0x10220000
 8001c70:	10210000 	.word	0x10210000
 8001c74:	10120000 	.word	0x10120000
 8001c78:	10110000 	.word	0x10110000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010000 	.word	0x40010000
 8001c84:	40010800 	.word	0x40010800
 8001c88:	40010c00 	.word	0x40010c00
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_GPIO_Init+0x2f4>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4909      	ldr	r1, [pc, #36]	@ (8001cc4 <HAL_GPIO_Init+0x2f4>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f ae96 	bne.w	80019e4 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	372c      	adds	r7, #44	@ 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e001      	b.n	8001cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
 8001d02:	4613      	mov	r3, r2
 8001d04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0c:	887a      	ldrh	r2, [r7, #2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	041a      	lsls	r2, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	041a      	lsls	r2, r3, #16
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	400b      	ands	r3, r1
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e272      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8087 	beq.w	8001e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d78:	4b92      	ldr	r3, [pc, #584]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 030c 	and.w	r3, r3, #12
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d00c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d84:	4b8f      	ldr	r3, [pc, #572]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d112      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
 8001d90:	4b8c      	ldr	r3, [pc, #560]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d9c:	d10b      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9e:	4b89      	ldr	r3, [pc, #548]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x12c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d168      	bne.n	8001e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e24c      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x76>
 8001dc0:	4b80      	ldr	r3, [pc, #512]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a7f      	ldr	r2, [pc, #508]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e02e      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a7a      	ldr	r2, [pc, #488]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b78      	ldr	r3, [pc, #480]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a77      	ldr	r2, [pc, #476]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0xbc>
 8001dfa:	4b72      	ldr	r3, [pc, #456]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a71      	ldr	r2, [pc, #452]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001e14:	4b6b      	ldr	r3, [pc, #428]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6a      	ldr	r2, [pc, #424]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b68      	ldr	r3, [pc, #416]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a67      	ldr	r2, [pc, #412]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fcb4 	bl	80017a0 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fcb0 	bl	80017a0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	@ 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e200      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe4>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fca0 	bl	80017a0 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fc9c 	bl	80017a0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1ec      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e76:	4b53      	ldr	r3, [pc, #332]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x10c>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d063      	beq.n	8001f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e92:	4b4c      	ldr	r3, [pc, #304]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e9e:	4b49      	ldr	r3, [pc, #292]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d11c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x18c>
 8001eaa:	4b46      	ldr	r3, [pc, #280]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d116      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	4b43      	ldr	r3, [pc, #268]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_RCC_OscConfig+0x176>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e1c0      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4939      	ldr	r1, [pc, #228]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee2:	e03a      	b.n	8001f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eec:	4b36      	ldr	r3, [pc, #216]	@ (8001fc8 <HAL_RCC_OscConfig+0x270>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef2:	f7ff fc55 	bl	80017a0 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efa:	f7ff fc51 	bl	80017a0 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e1a1      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4927      	ldr	r1, [pc, #156]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2e:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <HAL_RCC_OscConfig+0x270>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fc34 	bl	80017a0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc30 	bl	80017a0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e180      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d03a      	beq.n	8001fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d019      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6e:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <HAL_RCC_OscConfig+0x274>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff fc14 	bl	80017a0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fc10 	bl	80017a0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e160      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f000 fa9c 	bl	80024d8 <RCC_Delay>
 8001fa0:	e01c      	b.n	8001fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fbfa 	bl	80017a0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fae:	e00f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fbf6 	bl	80017a0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d908      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e146      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	42420000 	.word	0x42420000
 8001fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd0:	4b92      	ldr	r3, [pc, #584]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e9      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a6 	beq.w	8002136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fee:	4b8b      	ldr	r3, [pc, #556]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10d      	bne.n	8002016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b88      	ldr	r3, [pc, #544]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a87      	ldr	r2, [pc, #540]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b85      	ldr	r3, [pc, #532]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b82      	ldr	r3, [pc, #520]	@ (8002220 <HAL_RCC_OscConfig+0x4c8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b7f      	ldr	r3, [pc, #508]	@ (8002220 <HAL_RCC_OscConfig+0x4c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a7e      	ldr	r2, [pc, #504]	@ (8002220 <HAL_RCC_OscConfig+0x4c8>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7ff fbb7 	bl	80017a0 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002036:	f7ff fbb3 	bl	80017a0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	@ 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e103      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b75      	ldr	r3, [pc, #468]	@ (8002220 <HAL_RCC_OscConfig+0x4c8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x312>
 800205c:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a6e      	ldr	r2, [pc, #440]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	e02d      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x334>
 8002072:	4b6a      	ldr	r3, [pc, #424]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4a69      	ldr	r2, [pc, #420]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6213      	str	r3, [r2, #32]
 800207e:	4b67      	ldr	r3, [pc, #412]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a66      	ldr	r2, [pc, #408]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	e01c      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d10c      	bne.n	80020ae <HAL_RCC_OscConfig+0x356>
 8002094:	4b61      	ldr	r3, [pc, #388]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a60      	ldr	r2, [pc, #384]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	6213      	str	r3, [r2, #32]
 80020a0:	4b5e      	ldr	r3, [pc, #376]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a5d      	ldr	r2, [pc, #372]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e00b      	b.n	80020c6 <HAL_RCC_OscConfig+0x36e>
 80020ae:	4b5b      	ldr	r3, [pc, #364]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a5a      	ldr	r2, [pc, #360]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	4b58      	ldr	r3, [pc, #352]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a57      	ldr	r2, [pc, #348]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d015      	beq.n	80020fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb67 	bl	80017a0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7ff fb63 	bl	80017a0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0b1      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	4b4b      	ldr	r3, [pc, #300]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ee      	beq.n	80020d6 <HAL_RCC_OscConfig+0x37e>
 80020f8:	e014      	b.n	8002124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fb51 	bl	80017a0 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff fb4d 	bl	80017a0 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e09b      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	4b40      	ldr	r3, [pc, #256]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ee      	bne.n	8002102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b3c      	ldr	r3, [pc, #240]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a3b      	ldr	r2, [pc, #236]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8087 	beq.w	800224e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002140:	4b36      	ldr	r3, [pc, #216]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b08      	cmp	r3, #8
 800214a:	d061      	beq.n	8002210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d146      	bne.n	80021e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002154:	4b33      	ldr	r3, [pc, #204]	@ (8002224 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff fb21 	bl	80017a0 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff fb1d 	bl	80017a0 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e06d      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002174:	4b29      	ldr	r3, [pc, #164]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002188:	d108      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800218a:	4b24      	ldr	r3, [pc, #144]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4921      	ldr	r1, [pc, #132]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a19      	ldr	r1, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	430b      	orrs	r3, r1
 80021ae:	491b      	ldr	r1, [pc, #108]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff faf1 	bl	80017a0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c2:	f7ff faed 	bl	80017a0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e03d      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46a>
 80021e0:	e035      	b.n	800224e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <HAL_RCC_OscConfig+0x4cc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fada 	bl	80017a0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff fad6 	bl	80017a0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e026      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_RCC_OscConfig+0x4c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x498>
 800220e:	e01e      	b.n	800224e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e019      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCC_OscConfig+0x500>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0d0      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b67      	ldr	r3, [pc, #412]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0207 	bic.w	r2, r3, #7
 8002286:	4965      	ldr	r1, [pc, #404]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b63      	ldr	r3, [pc, #396]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a58      	ldr	r2, [pc, #352]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d0:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a52      	ldr	r2, [pc, #328]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022dc:	4b50      	ldr	r3, [pc, #320]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	494d      	ldr	r1, [pc, #308]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d040      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b47      	ldr	r3, [pc, #284]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d115      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e07f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b41      	ldr	r3, [pc, #260]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e073      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06b      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b39      	ldr	r3, [pc, #228]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4936      	ldr	r1, [pc, #216]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7ff fa28 	bl	80017a0 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7ff fa24 	bl	80017a0 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e053      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b27      	ldr	r3, [pc, #156]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d210      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	4922      	ldr	r1, [pc, #136]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e032      	b.n	8002412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4916      	ldr	r1, [pc, #88]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	490e      	ldr	r1, [pc, #56]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ea:	f000 f821 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	490a      	ldr	r1, [pc, #40]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	5ccb      	ldrb	r3, [r1, r3]
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <HAL_RCC_ClockConfig+0x1cc>)
 8002404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_RCC_ClockConfig+0x1d0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff f986 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40022000 	.word	0x40022000
 8002420:	40021000 	.word	0x40021000
 8002424:	08002d3c 	.word	0x08002d3c
 8002428:	20000034 	.word	0x20000034
 800242c:	20000038 	.word	0x20000038

08002430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800244a:	4b1e      	ldr	r3, [pc, #120]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b04      	cmp	r3, #4
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x30>
 800245a:	2b08      	cmp	r3, #8
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x36>
 800245e:	e027      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002462:	613b      	str	r3, [r7, #16]
      break;
 8002464:	e027      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	0c9b      	lsrs	r3, r3, #18
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	4a17      	ldr	r2, [pc, #92]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002470:	5cd3      	ldrb	r3, [r2, r3]
 8002472:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0c5b      	lsrs	r3, r3, #17
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a0d      	ldr	r2, [pc, #52]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	fb03 f202 	mul.w	r2, r3, r2
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	e004      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a0c      	ldr	r2, [pc, #48]	@ (80024d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	613b      	str	r3, [r7, #16]
      break;
 80024ae:	e002      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024b2:	613b      	str	r3, [r7, #16]
      break;
 80024b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b6:	693b      	ldr	r3, [r7, #16]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	007a1200 	.word	0x007a1200
 80024cc:	08002d4c 	.word	0x08002d4c
 80024d0:	08002d5c 	.word	0x08002d5c
 80024d4:	003d0900 	.word	0x003d0900

080024d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <RCC_Delay+0x34>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <RCC_Delay+0x38>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0a5b      	lsrs	r3, r3, #9
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f4:	bf00      	nop
  }
  while (Delay --);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	60fa      	str	r2, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <RCC_Delay+0x1c>
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000034 	.word	0x20000034
 8002510:	10624dd3 	.word	0x10624dd3

08002514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e041      	b.n	80025aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe ff80 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f000 fa56 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d001      	beq.n	80025cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e035      	b.n	8002638 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a16      	ldr	r2, [pc, #88]	@ (8002644 <HAL_TIM_Base_Start_IT+0x90>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_TIM_Base_Start_IT+0x4e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f6:	d004      	beq.n	8002602 <HAL_TIM_Base_Start_IT+0x4e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <HAL_TIM_Base_Start_IT+0x94>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d111      	bne.n	8002626 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b06      	cmp	r3, #6
 8002612:	d010      	beq.n	8002636 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002624:	e007      	b.n	8002636 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40000400 	.word	0x40000400

0800264c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d020      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01b      	beq.n	80026b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0202 	mvn.w	r2, #2
 8002680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f998 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f98b 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f99a 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d020      	beq.n	80026fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0204 	mvn.w	r2, #4
 80026cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f972 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f965 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f974 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0208 	mvn.w	r2, #8
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f94c 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f93f 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f94e 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	d020      	beq.n	8002794 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0210 	mvn.w	r2, #16
 8002764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2208      	movs	r2, #8
 800276a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f926 	bl	80029cc <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f919 	bl	80029ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f928 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00c      	beq.n	80027b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0201 	mvn.w	r2, #1
 80027b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe fd6a 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00c      	beq.n	80027dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa6f 	bl	8002cba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8f8 	bl	80029f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00c      	beq.n	8002824 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa42 	bl	8002ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0x1c>
 8002844:	2302      	movs	r3, #2
 8002846:	e0b4      	b.n	80029b2 <HAL_TIM_ConfigClockSource+0x186>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800286e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002880:	d03e      	beq.n	8002900 <HAL_TIM_ConfigClockSource+0xd4>
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002886:	f200 8087 	bhi.w	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800288e:	f000 8086 	beq.w	800299e <HAL_TIM_ConfigClockSource+0x172>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002896:	d87f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b70      	cmp	r3, #112	@ 0x70
 800289a:	d01a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xa6>
 800289c:	2b70      	cmp	r3, #112	@ 0x70
 800289e:	d87b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b60      	cmp	r3, #96	@ 0x60
 80028a2:	d050      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x11a>
 80028a4:	2b60      	cmp	r3, #96	@ 0x60
 80028a6:	d877      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b50      	cmp	r3, #80	@ 0x50
 80028aa:	d03c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0xfa>
 80028ac:	2b50      	cmp	r3, #80	@ 0x50
 80028ae:	d873      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b40      	cmp	r3, #64	@ 0x40
 80028b2:	d058      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x13a>
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d86f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b30      	cmp	r3, #48	@ 0x30
 80028ba:	d064      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b30      	cmp	r3, #48	@ 0x30
 80028be:	d86b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d060      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d867      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05c      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d05a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	e062      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	f000 f96a 	bl	8002bba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
      break;
 80028fe:	e04f      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002910:	f000 f953 	bl	8002bba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002922:	609a      	str	r2, [r3, #8]
      break;
 8002924:	e03c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8ca 	bl	8002acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2150      	movs	r1, #80	@ 0x50
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f921 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 8002944:	e02c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002952:	461a      	mov	r2, r3
 8002954:	f000 f8e8 	bl	8002b28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2160      	movs	r1, #96	@ 0x60
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f911 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 8002964:	e01c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	461a      	mov	r2, r3
 8002974:	f000 f8aa 	bl	8002acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2140      	movs	r1, #64	@ 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f901 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 8002984:	e00c      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 f8f8 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 8002996:	e003      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e000      	b.n	80029a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800299e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
	...

08002a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0x28>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0x28>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a28      	ldr	r2, [pc, #160]	@ (8002ac8 <TIM_Base_SetConfig+0xc4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d108      	bne.n	8002a3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a20      	ldr	r2, [pc, #128]	@ (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4c:	d003      	beq.n	8002a56 <TIM_Base_SetConfig+0x52>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac8 <TIM_Base_SetConfig+0xc4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f023 0201 	bic.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	611a      	str	r2, [r3, #16]
  }
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400

08002acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 030a 	bic.w	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f023 0210 	bic.w	r2, r3, #16
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	031b      	lsls	r3, r3, #12
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f043 0307 	orr.w	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	021a      	lsls	r2, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	609a      	str	r2, [r3, #8]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e041      	b.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d009      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a10      	ldr	r2, [pc, #64]	@ (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10c      	bne.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400

08002ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <memset>:
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4402      	add	r2, r0
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d100      	bne.n	8002cd6 <memset+0xa>
 8002cd4:	4770      	bx	lr
 8002cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cda:	e7f9      	b.n	8002cd0 <memset+0x4>

08002cdc <__libc_init_array>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	2600      	movs	r6, #0
 8002ce0:	4d0c      	ldr	r5, [pc, #48]	@ (8002d14 <__libc_init_array+0x38>)
 8002ce2:	4c0d      	ldr	r4, [pc, #52]	@ (8002d18 <__libc_init_array+0x3c>)
 8002ce4:	1b64      	subs	r4, r4, r5
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	42a6      	cmp	r6, r4
 8002cea:	d109      	bne.n	8002d00 <__libc_init_array+0x24>
 8002cec:	f000 f81a 	bl	8002d24 <_init>
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	4d0a      	ldr	r5, [pc, #40]	@ (8002d1c <__libc_init_array+0x40>)
 8002cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8002d20 <__libc_init_array+0x44>)
 8002cf6:	1b64      	subs	r4, r4, r5
 8002cf8:	10a4      	asrs	r4, r4, #2
 8002cfa:	42a6      	cmp	r6, r4
 8002cfc:	d105      	bne.n	8002d0a <__libc_init_array+0x2e>
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d04:	4798      	blx	r3
 8002d06:	3601      	adds	r6, #1
 8002d08:	e7ee      	b.n	8002ce8 <__libc_init_array+0xc>
 8002d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0e:	4798      	blx	r3
 8002d10:	3601      	adds	r6, #1
 8002d12:	e7f2      	b.n	8002cfa <__libc_init_array+0x1e>
 8002d14:	08002d60 	.word	0x08002d60
 8002d18:	08002d60 	.word	0x08002d60
 8002d1c:	08002d60 	.word	0x08002d60
 8002d20:	08002d64 	.word	0x08002d64

08002d24 <_init>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr

08002d30 <_fini>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	bf00      	nop
 8002d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d36:	bc08      	pop	{r3}
 8002d38:	469e      	mov	lr, r3
 8002d3a:	4770      	bx	lr
