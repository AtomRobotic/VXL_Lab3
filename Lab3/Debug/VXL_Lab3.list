
VXL_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002650  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800275c  0800275c  0000375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002780  08002780  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002780  08002780  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002780  08002780  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002780  08002780  00003780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002784  08002784  00003784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002788  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002794  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002794  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082b1  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001978  00000000  00000000  0000c2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0000dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e1  00000000  00000000  0000e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001634f  00000000  00000000  0000ee99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c107  00000000  00000000  000251e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008257d  00000000  00000000  000312ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b386c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e0  00000000  00000000  000b38b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  000b6190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002744 	.word	0x08002744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002744 	.word	0x08002744

0800014c <fsm_automatic_run>:

#include "fsm_automatic.h"



void fsm_automatic_run(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer2_counter == 0){
 8000150:	4b65      	ldr	r3, [pc, #404]	@ (80002e8 <fsm_automatic_run+0x19c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d10c      	bne.n	8000172 <fsm_automatic_run+0x26>
		update7SEG_AB(ledModeData);
 8000158:	4b64      	ldr	r3, [pc, #400]	@ (80002ec <fsm_automatic_run+0x1a0>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4618      	mov	r0, r3
 800015e:	f000 fd07 	bl	8000b70 <update7SEG_AB>
		update7SEG_CD(ledValueData);
 8000162:	4b63      	ldr	r3, [pc, #396]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	4618      	mov	r0, r3
 8000168:	f000 fd26 	bl	8000bb8 <update7SEG_CD>
		timer2_flag = 1;
 800016c:	4b61      	ldr	r3, [pc, #388]	@ (80002f4 <fsm_automatic_run+0x1a8>)
 800016e:	2201      	movs	r2, #1
 8000170:	601a      	str	r2, [r3, #0]
	}
	switch (state){
 8000172:	4b61      	ldr	r3, [pc, #388]	@ (80002f8 <fsm_automatic_run+0x1ac>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b04      	cmp	r3, #4
 8000178:	f200 808f 	bhi.w	800029a <fsm_automatic_run+0x14e>
 800017c:	a201      	add	r2, pc, #4	@ (adr r2, 8000184 <fsm_automatic_run+0x38>)
 800017e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000182:	bf00      	nop
 8000184:	08000199 	.word	0x08000199
 8000188:	080001cb 	.word	0x080001cb
 800018c:	080001f9 	.word	0x080001f9
 8000190:	08000233 	.word	0x08000233
 8000194:	08000261 	.word	0x08000261
	case init:
		setTimer1(greenTime * 1000);
 8000198:	4b58      	ldr	r3, [pc, #352]	@ (80002fc <fsm_automatic_run+0x1b0>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001a0:	fb02 f303 	mul.w	r3, r2, r3
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 fe2d 	bl	8000e04 <setTimer1>
		ledModeData = redTime;
 80001aa:	4b55      	ldr	r3, [pc, #340]	@ (8000300 <fsm_automatic_run+0x1b4>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a4f      	ldr	r2, [pc, #316]	@ (80002ec <fsm_automatic_run+0x1a0>)
 80001b0:	6013      	str	r3, [r2, #0]
		ledValueData = greenTime;
 80001b2:	4b52      	ldr	r3, [pc, #328]	@ (80002fc <fsm_automatic_run+0x1b0>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a4e      	ldr	r2, [pc, #312]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 80001b8:	6013      	str	r3, [r2, #0]
		OnRed_1();
 80001ba:	f000 ff2f 	bl	800101c <OnRed_1>
		OnGreen_2();
 80001be:	f000 ff9b 	bl	80010f8 <OnGreen_2>
		state = state1;
 80001c2:	4b4d      	ldr	r3, [pc, #308]	@ (80002f8 <fsm_automatic_run+0x1ac>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	601a      	str	r2, [r3, #0]
		break;
 80001c8:	e070      	b.n	80002ac <fsm_automatic_run+0x160>
	case state1:
		if(timer1_flag == 1){
 80001ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000304 <fsm_automatic_run+0x1b8>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d165      	bne.n	800029e <fsm_automatic_run+0x152>
			setTimer1(yellowTime * 1000);
 80001d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000308 <fsm_automatic_run+0x1bc>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001da:	fb02 f303 	mul.w	r3, r2, r3
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fe10 	bl	8000e04 <setTimer1>
			OnYellow_2();
 80001e4:	f000 ff72 	bl	80010cc <OnYellow_2>
			ledValueData = yellowTime;
 80001e8:	4b47      	ldr	r3, [pc, #284]	@ (8000308 <fsm_automatic_run+0x1bc>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a40      	ldr	r2, [pc, #256]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 80001ee:	6013      	str	r3, [r2, #0]
			state = state2;
 80001f0:	4b41      	ldr	r3, [pc, #260]	@ (80002f8 <fsm_automatic_run+0x1ac>)
 80001f2:	2202      	movs	r2, #2
 80001f4:	601a      	str	r2, [r3, #0]
		}
		break;
 80001f6:	e052      	b.n	800029e <fsm_automatic_run+0x152>
	case state2:
		if(timer1_flag == 1){
 80001f8:	4b42      	ldr	r3, [pc, #264]	@ (8000304 <fsm_automatic_run+0x1b8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d150      	bne.n	80002a2 <fsm_automatic_run+0x156>
			setTimer1(greenTime * 1000);
 8000200:	4b3e      	ldr	r3, [pc, #248]	@ (80002fc <fsm_automatic_run+0x1b0>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000208:	fb02 f303 	mul.w	r3, r2, r3
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fdf9 	bl	8000e04 <setTimer1>
			OnGreen_1();
 8000212:	f000 ff2f 	bl	8001074 <OnGreen_1>
			OnRed_2();
 8000216:	f000 ff43 	bl	80010a0 <OnRed_2>
			ledModeData = greenTime;
 800021a:	4b38      	ldr	r3, [pc, #224]	@ (80002fc <fsm_automatic_run+0x1b0>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a33      	ldr	r2, [pc, #204]	@ (80002ec <fsm_automatic_run+0x1a0>)
 8000220:	6013      	str	r3, [r2, #0]
			ledValueData = redTime;
 8000222:	4b37      	ldr	r3, [pc, #220]	@ (8000300 <fsm_automatic_run+0x1b4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a32      	ldr	r2, [pc, #200]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 8000228:	6013      	str	r3, [r2, #0]
			state = state3;
 800022a:	4b33      	ldr	r3, [pc, #204]	@ (80002f8 <fsm_automatic_run+0x1ac>)
 800022c:	2203      	movs	r2, #3
 800022e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000230:	e037      	b.n	80002a2 <fsm_automatic_run+0x156>
	case state3:
		if(timer1_flag == 1){
 8000232:	4b34      	ldr	r3, [pc, #208]	@ (8000304 <fsm_automatic_run+0x1b8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d135      	bne.n	80002a6 <fsm_automatic_run+0x15a>
			setTimer1(yellowTime * 1000);
 800023a:	4b33      	ldr	r3, [pc, #204]	@ (8000308 <fsm_automatic_run+0x1bc>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000242:	fb02 f303 	mul.w	r3, r2, r3
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fddc 	bl	8000e04 <setTimer1>
			OnYellow_1();
 800024c:	f000 fefc 	bl	8001048 <OnYellow_1>
			ledModeData = yellowTime;
 8000250:	4b2d      	ldr	r3, [pc, #180]	@ (8000308 <fsm_automatic_run+0x1bc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a25      	ldr	r2, [pc, #148]	@ (80002ec <fsm_automatic_run+0x1a0>)
 8000256:	6013      	str	r3, [r2, #0]
			state = state4;
 8000258:	4b27      	ldr	r3, [pc, #156]	@ (80002f8 <fsm_automatic_run+0x1ac>)
 800025a:	2204      	movs	r2, #4
 800025c:	601a      	str	r2, [r3, #0]
		}
		break;
 800025e:	e022      	b.n	80002a6 <fsm_automatic_run+0x15a>
	case state4:
		if(timer1_flag == 1){
 8000260:	4b28      	ldr	r3, [pc, #160]	@ (8000304 <fsm_automatic_run+0x1b8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b01      	cmp	r3, #1
 8000266:	d120      	bne.n	80002aa <fsm_automatic_run+0x15e>
			setTimer1(greenTime * 1000);
 8000268:	4b24      	ldr	r3, [pc, #144]	@ (80002fc <fsm_automatic_run+0x1b0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000270:	fb02 f303 	mul.w	r3, r2, r3
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fdc5 	bl	8000e04 <setTimer1>
			OnRed_1();
 800027a:	f000 fecf 	bl	800101c <OnRed_1>
			OnGreen_2();
 800027e:	f000 ff3b 	bl	80010f8 <OnGreen_2>
			ledModeData = redTime;
 8000282:	4b1f      	ldr	r3, [pc, #124]	@ (8000300 <fsm_automatic_run+0x1b4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a19      	ldr	r2, [pc, #100]	@ (80002ec <fsm_automatic_run+0x1a0>)
 8000288:	6013      	str	r3, [r2, #0]
			ledValueData = greenTime;
 800028a:	4b1c      	ldr	r3, [pc, #112]	@ (80002fc <fsm_automatic_run+0x1b0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a18      	ldr	r2, [pc, #96]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 8000290:	6013      	str	r3, [r2, #0]
			state = state1;
 8000292:	4b19      	ldr	r3, [pc, #100]	@ (80002f8 <fsm_automatic_run+0x1ac>)
 8000294:	2201      	movs	r2, #1
 8000296:	601a      	str	r2, [r3, #0]
		}
		break;
 8000298:	e007      	b.n	80002aa <fsm_automatic_run+0x15e>
	default:
		break;
 800029a:	bf00      	nop
 800029c:	e006      	b.n	80002ac <fsm_automatic_run+0x160>
		break;
 800029e:	bf00      	nop
 80002a0:	e004      	b.n	80002ac <fsm_automatic_run+0x160>
		break;
 80002a2:	bf00      	nop
 80002a4:	e002      	b.n	80002ac <fsm_automatic_run+0x160>
		break;
 80002a6:	bf00      	nop
 80002a8:	e000      	b.n	80002ac <fsm_automatic_run+0x160>
		break;
 80002aa:	bf00      	nop
	}
	if(timer2_flag == 1){
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <fsm_automatic_run+0x1a8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d117      	bne.n	80002e4 <fsm_automatic_run+0x198>
		setTimer2(1000);
 80002b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b8:	f000 fdc0 	bl	8000e3c <setTimer2>
		update7SEG_AB(ledModeData);
 80002bc:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <fsm_automatic_run+0x1a0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 fc55 	bl	8000b70 <update7SEG_AB>
		update7SEG_CD(ledValueData);
 80002c6:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fc74 	bl	8000bb8 <update7SEG_CD>
		ledModeData--;
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <fsm_automatic_run+0x1a0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a05      	ldr	r2, [pc, #20]	@ (80002ec <fsm_automatic_run+0x1a0>)
 80002d8:	6013      	str	r3, [r2, #0]
		ledValueData--;
 80002da:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3b01      	subs	r3, #1
 80002e0:	4a03      	ldr	r2, [pc, #12]	@ (80002f0 <fsm_automatic_run+0x1a4>)
 80002e2:	6013      	str	r3, [r2, #0]
	}
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000094 	.word	0x20000094
 80002ec:	20000038 	.word	0x20000038
 80002f0:	2000003c 	.word	0x2000003c
 80002f4:	20000090 	.word	0x20000090
 80002f8:	20000028 	.word	0x20000028
 80002fc:	20000030 	.word	0x20000030
 8000300:	20000034 	.word	0x20000034
 8000304:	20000088 	.word	0x20000088
 8000308:	2000002c 	.word	0x2000002c

0800030c <initValues>:
int redTime;

int ledModeData;
int ledValueData;

void initValues() {
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	yellowTime = YELLOW_TIME;
 8000310:	4b0a      	ldr	r3, [pc, #40]	@ (800033c <initValues+0x30>)
 8000312:	2204      	movs	r2, #4
 8000314:	601a      	str	r2, [r3, #0]
	greenTime = GREEN_TIME;
 8000316:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <initValues+0x34>)
 8000318:	220a      	movs	r2, #10
 800031a:	601a      	str	r2, [r3, #0]
	redTime = RED_TIME;
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <initValues+0x38>)
 800031e:	220e      	movs	r2, #14
 8000320:	601a      	str	r2, [r3, #0]
	ledModeData = redTime;
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <initValues+0x38>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <initValues+0x3c>)
 8000328:	6013      	str	r3, [r2, #0]
	ledValueData = greenTime;
 800032a:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <initValues+0x34>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a07      	ldr	r2, [pc, #28]	@ (800034c <initValues+0x40>)
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	2000002c 	.word	0x2000002c
 8000340:	20000030 	.word	0x20000030
 8000344:	20000034 	.word	0x20000034
 8000348:	20000038 	.word	0x20000038
 800034c:	2000003c 	.word	0x2000003c

08000350 <display_SEG_A>:
 *      Author: ADMIN
 */

#include "led_displayer.h"

void display_SEG_A(int counter) {
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d113      	bne.n	8000386 <display_SEG_A+0x36>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2101      	movs	r1, #1
 8000362:	4872      	ldr	r0, [pc, #456]	@ (800052c <display_SEG_A+0x1dc>)
 8000364:	f001 f9f0 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2102      	movs	r1, #2
 800036c:	486f      	ldr	r0, [pc, #444]	@ (800052c <display_SEG_A+0x1dc>)
 800036e:	f001 f9eb 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	2104      	movs	r1, #4
 8000376:	486d      	ldr	r0, [pc, #436]	@ (800052c <display_SEG_A+0x1dc>)
 8000378:	f001 f9e6 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2108      	movs	r1, #8
 8000380:	486a      	ldr	r0, [pc, #424]	@ (800052c <display_SEG_A+0x1dc>)
 8000382:	f001 f9e1 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d113      	bne.n	80003b4 <display_SEG_A+0x64>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	4866      	ldr	r0, [pc, #408]	@ (800052c <display_SEG_A+0x1dc>)
 8000392:	f001 f9d9 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2102      	movs	r1, #2
 800039a:	4864      	ldr	r0, [pc, #400]	@ (800052c <display_SEG_A+0x1dc>)
 800039c:	f001 f9d4 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2104      	movs	r1, #4
 80003a4:	4861      	ldr	r0, [pc, #388]	@ (800052c <display_SEG_A+0x1dc>)
 80003a6:	f001 f9cf 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2108      	movs	r1, #8
 80003ae:	485f      	ldr	r0, [pc, #380]	@ (800052c <display_SEG_A+0x1dc>)
 80003b0:	f001 f9ca 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d113      	bne.n	80003e2 <display_SEG_A+0x92>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	485b      	ldr	r0, [pc, #364]	@ (800052c <display_SEG_A+0x1dc>)
 80003c0:	f001 f9c2 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2102      	movs	r1, #2
 80003c8:	4858      	ldr	r0, [pc, #352]	@ (800052c <display_SEG_A+0x1dc>)
 80003ca:	f001 f9bd 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2104      	movs	r1, #4
 80003d2:	4856      	ldr	r0, [pc, #344]	@ (800052c <display_SEG_A+0x1dc>)
 80003d4:	f001 f9b8 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	4853      	ldr	r0, [pc, #332]	@ (800052c <display_SEG_A+0x1dc>)
 80003de:	f001 f9b3 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d113      	bne.n	8000410 <display_SEG_A+0xc0>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2101      	movs	r1, #1
 80003ec:	484f      	ldr	r0, [pc, #316]	@ (800052c <display_SEG_A+0x1dc>)
 80003ee:	f001 f9ab 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2102      	movs	r1, #2
 80003f6:	484d      	ldr	r0, [pc, #308]	@ (800052c <display_SEG_A+0x1dc>)
 80003f8:	f001 f9a6 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2104      	movs	r1, #4
 8000400:	484a      	ldr	r0, [pc, #296]	@ (800052c <display_SEG_A+0x1dc>)
 8000402:	f001 f9a1 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2108      	movs	r1, #8
 800040a:	4848      	ldr	r0, [pc, #288]	@ (800052c <display_SEG_A+0x1dc>)
 800040c:	f001 f99c 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2b04      	cmp	r3, #4
 8000414:	d113      	bne.n	800043e <display_SEG_A+0xee>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2101      	movs	r1, #1
 800041a:	4844      	ldr	r0, [pc, #272]	@ (800052c <display_SEG_A+0x1dc>)
 800041c:	f001 f994 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 8000420:	2201      	movs	r2, #1
 8000422:	2102      	movs	r1, #2
 8000424:	4841      	ldr	r0, [pc, #260]	@ (800052c <display_SEG_A+0x1dc>)
 8000426:	f001 f98f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2104      	movs	r1, #4
 800042e:	483f      	ldr	r0, [pc, #252]	@ (800052c <display_SEG_A+0x1dc>)
 8000430:	f001 f98a 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2108      	movs	r1, #8
 8000438:	483c      	ldr	r0, [pc, #240]	@ (800052c <display_SEG_A+0x1dc>)
 800043a:	f001 f985 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b05      	cmp	r3, #5
 8000442:	d113      	bne.n	800046c <display_SEG_A+0x11c>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	4838      	ldr	r0, [pc, #224]	@ (800052c <display_SEG_A+0x1dc>)
 800044a:	f001 f97d 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 800044e:	2201      	movs	r2, #1
 8000450:	2102      	movs	r1, #2
 8000452:	4836      	ldr	r0, [pc, #216]	@ (800052c <display_SEG_A+0x1dc>)
 8000454:	f001 f978 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2104      	movs	r1, #4
 800045c:	4833      	ldr	r0, [pc, #204]	@ (800052c <display_SEG_A+0x1dc>)
 800045e:	f001 f973 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2108      	movs	r1, #8
 8000466:	4831      	ldr	r0, [pc, #196]	@ (800052c <display_SEG_A+0x1dc>)
 8000468:	f001 f96e 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b06      	cmp	r3, #6
 8000470:	d113      	bne.n	800049a <display_SEG_A+0x14a>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2101      	movs	r1, #1
 8000476:	482d      	ldr	r0, [pc, #180]	@ (800052c <display_SEG_A+0x1dc>)
 8000478:	f001 f966 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2102      	movs	r1, #2
 8000480:	482a      	ldr	r0, [pc, #168]	@ (800052c <display_SEG_A+0x1dc>)
 8000482:	f001 f961 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2104      	movs	r1, #4
 800048a:	4828      	ldr	r0, [pc, #160]	@ (800052c <display_SEG_A+0x1dc>)
 800048c:	f001 f95c 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2108      	movs	r1, #8
 8000494:	4825      	ldr	r0, [pc, #148]	@ (800052c <display_SEG_A+0x1dc>)
 8000496:	f001 f957 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d113      	bne.n	80004c8 <display_SEG_A+0x178>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2101      	movs	r1, #1
 80004a4:	4821      	ldr	r0, [pc, #132]	@ (800052c <display_SEG_A+0x1dc>)
 80004a6:	f001 f94f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2102      	movs	r1, #2
 80004ae:	481f      	ldr	r0, [pc, #124]	@ (800052c <display_SEG_A+0x1dc>)
 80004b0:	f001 f94a 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2104      	movs	r1, #4
 80004b8:	481c      	ldr	r0, [pc, #112]	@ (800052c <display_SEG_A+0x1dc>)
 80004ba:	f001 f945 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2108      	movs	r1, #8
 80004c2:	481a      	ldr	r0, [pc, #104]	@ (800052c <display_SEG_A+0x1dc>)
 80004c4:	f001 f940 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b08      	cmp	r3, #8
 80004cc:	d113      	bne.n	80004f6 <display_SEG_A+0x1a6>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2101      	movs	r1, #1
 80004d2:	4816      	ldr	r0, [pc, #88]	@ (800052c <display_SEG_A+0x1dc>)
 80004d4:	f001 f938 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2102      	movs	r1, #2
 80004dc:	4813      	ldr	r0, [pc, #76]	@ (800052c <display_SEG_A+0x1dc>)
 80004de:	f001 f933 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2104      	movs	r1, #4
 80004e6:	4811      	ldr	r0, [pc, #68]	@ (800052c <display_SEG_A+0x1dc>)
 80004e8:	f001 f92e 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2108      	movs	r1, #8
 80004f0:	480e      	ldr	r0, [pc, #56]	@ (800052c <display_SEG_A+0x1dc>)
 80004f2:	f001 f929 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b09      	cmp	r3, #9
 80004fa:	d113      	bne.n	8000524 <display_SEG_A+0x1d4>
		HAL_GPIO_WritePin(SEG_A_1_GPIO_Port, SEG_A_1_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2101      	movs	r1, #1
 8000500:	480a      	ldr	r0, [pc, #40]	@ (800052c <display_SEG_A+0x1dc>)
 8000502:	f001 f921 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_2_GPIO_Port, SEG_A_2_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2102      	movs	r1, #2
 800050a:	4808      	ldr	r0, [pc, #32]	@ (800052c <display_SEG_A+0x1dc>)
 800050c:	f001 f91c 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_3_GPIO_Port, SEG_A_3_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2104      	movs	r1, #4
 8000514:	4805      	ldr	r0, [pc, #20]	@ (800052c <display_SEG_A+0x1dc>)
 8000516:	f001 f917 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_A_4_GPIO_Port, SEG_A_4_Pin, SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2108      	movs	r1, #8
 800051e:	4803      	ldr	r0, [pc, #12]	@ (800052c <display_SEG_A+0x1dc>)
 8000520:	f001 f912 	bl	8001748 <HAL_GPIO_WritePin>
	}
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40010c00 	.word	0x40010c00

08000530 <display_SEG_B>:

void display_SEG_B(int counter) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d113      	bne.n	8000566 <display_SEG_B+0x36>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	4872      	ldr	r0, [pc, #456]	@ (800070c <display_SEG_B+0x1dc>)
 8000544:	f001 f900 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2120      	movs	r1, #32
 800054c:	486f      	ldr	r0, [pc, #444]	@ (800070c <display_SEG_B+0x1dc>)
 800054e:	f001 f8fb 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	486d      	ldr	r0, [pc, #436]	@ (800070c <display_SEG_B+0x1dc>)
 8000558:	f001 f8f6 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	486a      	ldr	r0, [pc, #424]	@ (800070c <display_SEG_B+0x1dc>)
 8000562:	f001 f8f1 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d113      	bne.n	8000594 <display_SEG_B+0x64>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2110      	movs	r1, #16
 8000570:	4866      	ldr	r0, [pc, #408]	@ (800070c <display_SEG_B+0x1dc>)
 8000572:	f001 f8e9 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2120      	movs	r1, #32
 800057a:	4864      	ldr	r0, [pc, #400]	@ (800070c <display_SEG_B+0x1dc>)
 800057c:	f001 f8e4 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2140      	movs	r1, #64	@ 0x40
 8000584:	4861      	ldr	r0, [pc, #388]	@ (800070c <display_SEG_B+0x1dc>)
 8000586:	f001 f8df 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2180      	movs	r1, #128	@ 0x80
 800058e:	485f      	ldr	r0, [pc, #380]	@ (800070c <display_SEG_B+0x1dc>)
 8000590:	f001 f8da 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d113      	bne.n	80005c2 <display_SEG_B+0x92>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	485b      	ldr	r0, [pc, #364]	@ (800070c <display_SEG_B+0x1dc>)
 80005a0:	f001 f8d2 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2120      	movs	r1, #32
 80005a8:	4858      	ldr	r0, [pc, #352]	@ (800070c <display_SEG_B+0x1dc>)
 80005aa:	f001 f8cd 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2140      	movs	r1, #64	@ 0x40
 80005b2:	4856      	ldr	r0, [pc, #344]	@ (800070c <display_SEG_B+0x1dc>)
 80005b4:	f001 f8c8 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	4853      	ldr	r0, [pc, #332]	@ (800070c <display_SEG_B+0x1dc>)
 80005be:	f001 f8c3 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	d113      	bne.n	80005f0 <display_SEG_B+0xc0>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	484f      	ldr	r0, [pc, #316]	@ (800070c <display_SEG_B+0x1dc>)
 80005ce:	f001 f8bb 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	484d      	ldr	r0, [pc, #308]	@ (800070c <display_SEG_B+0x1dc>)
 80005d8:	f001 f8b6 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	@ 0x40
 80005e0:	484a      	ldr	r0, [pc, #296]	@ (800070c <display_SEG_B+0x1dc>)
 80005e2:	f001 f8b1 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	4848      	ldr	r0, [pc, #288]	@ (800070c <display_SEG_B+0x1dc>)
 80005ec:	f001 f8ac 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d113      	bne.n	800061e <display_SEG_B+0xee>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	4844      	ldr	r0, [pc, #272]	@ (800070c <display_SEG_B+0x1dc>)
 80005fc:	f001 f8a4 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2120      	movs	r1, #32
 8000604:	4841      	ldr	r0, [pc, #260]	@ (800070c <display_SEG_B+0x1dc>)
 8000606:	f001 f89f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	@ 0x40
 800060e:	483f      	ldr	r0, [pc, #252]	@ (800070c <display_SEG_B+0x1dc>)
 8000610:	f001 f89a 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2180      	movs	r1, #128	@ 0x80
 8000618:	483c      	ldr	r0, [pc, #240]	@ (800070c <display_SEG_B+0x1dc>)
 800061a:	f001 f895 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b05      	cmp	r3, #5
 8000622:	d113      	bne.n	800064c <display_SEG_B+0x11c>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2110      	movs	r1, #16
 8000628:	4838      	ldr	r0, [pc, #224]	@ (800070c <display_SEG_B+0x1dc>)
 800062a:	f001 f88d 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2120      	movs	r1, #32
 8000632:	4836      	ldr	r0, [pc, #216]	@ (800070c <display_SEG_B+0x1dc>)
 8000634:	f001 f888 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2140      	movs	r1, #64	@ 0x40
 800063c:	4833      	ldr	r0, [pc, #204]	@ (800070c <display_SEG_B+0x1dc>)
 800063e:	f001 f883 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	4831      	ldr	r0, [pc, #196]	@ (800070c <display_SEG_B+0x1dc>)
 8000648:	f001 f87e 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b06      	cmp	r3, #6
 8000650:	d113      	bne.n	800067a <display_SEG_B+0x14a>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2110      	movs	r1, #16
 8000656:	482d      	ldr	r0, [pc, #180]	@ (800070c <display_SEG_B+0x1dc>)
 8000658:	f001 f876 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2120      	movs	r1, #32
 8000660:	482a      	ldr	r0, [pc, #168]	@ (800070c <display_SEG_B+0x1dc>)
 8000662:	f001 f871 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2140      	movs	r1, #64	@ 0x40
 800066a:	4828      	ldr	r0, [pc, #160]	@ (800070c <display_SEG_B+0x1dc>)
 800066c:	f001 f86c 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2180      	movs	r1, #128	@ 0x80
 8000674:	4825      	ldr	r0, [pc, #148]	@ (800070c <display_SEG_B+0x1dc>)
 8000676:	f001 f867 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b07      	cmp	r3, #7
 800067e:	d113      	bne.n	80006a8 <display_SEG_B+0x178>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2110      	movs	r1, #16
 8000684:	4821      	ldr	r0, [pc, #132]	@ (800070c <display_SEG_B+0x1dc>)
 8000686:	f001 f85f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, SET);
 800068a:	2201      	movs	r2, #1
 800068c:	2120      	movs	r1, #32
 800068e:	481f      	ldr	r0, [pc, #124]	@ (800070c <display_SEG_B+0x1dc>)
 8000690:	f001 f85a 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2140      	movs	r1, #64	@ 0x40
 8000698:	481c      	ldr	r0, [pc, #112]	@ (800070c <display_SEG_B+0x1dc>)
 800069a:	f001 f855 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	@ 0x80
 80006a2:	481a      	ldr	r0, [pc, #104]	@ (800070c <display_SEG_B+0x1dc>)
 80006a4:	f001 f850 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b08      	cmp	r3, #8
 80006ac:	d113      	bne.n	80006d6 <display_SEG_B+0x1a6>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, SET);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	4816      	ldr	r0, [pc, #88]	@ (800070c <display_SEG_B+0x1dc>)
 80006b4:	f001 f848 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2120      	movs	r1, #32
 80006bc:	4813      	ldr	r0, [pc, #76]	@ (800070c <display_SEG_B+0x1dc>)
 80006be:	f001 f843 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2140      	movs	r1, #64	@ 0x40
 80006c6:	4811      	ldr	r0, [pc, #68]	@ (800070c <display_SEG_B+0x1dc>)
 80006c8:	f001 f83e 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	@ 0x80
 80006d0:	480e      	ldr	r0, [pc, #56]	@ (800070c <display_SEG_B+0x1dc>)
 80006d2:	f001 f839 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	d113      	bne.n	8000704 <display_SEG_B+0x1d4>
		HAL_GPIO_WritePin(SEG_B_1_GPIO_Port, SEG_B_1_Pin, SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2110      	movs	r1, #16
 80006e0:	480a      	ldr	r0, [pc, #40]	@ (800070c <display_SEG_B+0x1dc>)
 80006e2:	f001 f831 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_2_GPIO_Port, SEG_B_2_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2120      	movs	r1, #32
 80006ea:	4808      	ldr	r0, [pc, #32]	@ (800070c <display_SEG_B+0x1dc>)
 80006ec:	f001 f82c 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_3_GPIO_Port, SEG_B_3_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2140      	movs	r1, #64	@ 0x40
 80006f4:	4805      	ldr	r0, [pc, #20]	@ (800070c <display_SEG_B+0x1dc>)
 80006f6:	f001 f827 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_4_GPIO_Port, SEG_B_4_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	4803      	ldr	r0, [pc, #12]	@ (800070c <display_SEG_B+0x1dc>)
 8000700:	f001 f822 	bl	8001748 <HAL_GPIO_WritePin>
	}
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40010c00 	.word	0x40010c00

08000710 <display_SEG_C>:

void display_SEG_C(int counter) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d117      	bne.n	800074e <display_SEG_C+0x3e>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000724:	4885      	ldr	r0, [pc, #532]	@ (800093c <display_SEG_C+0x22c>)
 8000726:	f001 f80f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000730:	4882      	ldr	r0, [pc, #520]	@ (800093c <display_SEG_C+0x22c>)
 8000732:	f001 f809 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800073c:	487f      	ldr	r0, [pc, #508]	@ (800093c <display_SEG_C+0x22c>)
 800073e:	f001 f803 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000748:	487c      	ldr	r0, [pc, #496]	@ (800093c <display_SEG_C+0x22c>)
 800074a:	f000 fffd 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d117      	bne.n	8000784 <display_SEG_C+0x74>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075a:	4878      	ldr	r0, [pc, #480]	@ (800093c <display_SEG_C+0x22c>)
 800075c:	f000 fff4 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000766:	4875      	ldr	r0, [pc, #468]	@ (800093c <display_SEG_C+0x22c>)
 8000768:	f000 ffee 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000772:	4872      	ldr	r0, [pc, #456]	@ (800093c <display_SEG_C+0x22c>)
 8000774:	f000 ffe8 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800077e:	486f      	ldr	r0, [pc, #444]	@ (800093c <display_SEG_C+0x22c>)
 8000780:	f000 ffe2 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d117      	bne.n	80007ba <display_SEG_C+0xaa>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000790:	486a      	ldr	r0, [pc, #424]	@ (800093c <display_SEG_C+0x22c>)
 8000792:	f000 ffd9 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800079c:	4867      	ldr	r0, [pc, #412]	@ (800093c <display_SEG_C+0x22c>)
 800079e:	f000 ffd3 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a8:	4864      	ldr	r0, [pc, #400]	@ (800093c <display_SEG_C+0x22c>)
 80007aa:	f000 ffcd 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007b4:	4861      	ldr	r0, [pc, #388]	@ (800093c <display_SEG_C+0x22c>)
 80007b6:	f000 ffc7 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d117      	bne.n	80007f0 <display_SEG_C+0xe0>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c6:	485d      	ldr	r0, [pc, #372]	@ (800093c <display_SEG_C+0x22c>)
 80007c8:	f000 ffbe 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d2:	485a      	ldr	r0, [pc, #360]	@ (800093c <display_SEG_C+0x22c>)
 80007d4:	f000 ffb8 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007de:	4857      	ldr	r0, [pc, #348]	@ (800093c <display_SEG_C+0x22c>)
 80007e0:	f000 ffb2 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ea:	4854      	ldr	r0, [pc, #336]	@ (800093c <display_SEG_C+0x22c>)
 80007ec:	f000 ffac 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d117      	bne.n	8000826 <display_SEG_C+0x116>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007fc:	484f      	ldr	r0, [pc, #316]	@ (800093c <display_SEG_C+0x22c>)
 80007fe:	f000 ffa3 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000808:	484c      	ldr	r0, [pc, #304]	@ (800093c <display_SEG_C+0x22c>)
 800080a:	f000 ff9d 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000814:	4849      	ldr	r0, [pc, #292]	@ (800093c <display_SEG_C+0x22c>)
 8000816:	f000 ff97 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000820:	4846      	ldr	r0, [pc, #280]	@ (800093c <display_SEG_C+0x22c>)
 8000822:	f000 ff91 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b05      	cmp	r3, #5
 800082a:	d117      	bne.n	800085c <display_SEG_C+0x14c>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000832:	4842      	ldr	r0, [pc, #264]	@ (800093c <display_SEG_C+0x22c>)
 8000834:	f000 ff88 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083e:	483f      	ldr	r0, [pc, #252]	@ (800093c <display_SEG_C+0x22c>)
 8000840:	f000 ff82 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800084a:	483c      	ldr	r0, [pc, #240]	@ (800093c <display_SEG_C+0x22c>)
 800084c:	f000 ff7c 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000856:	4839      	ldr	r0, [pc, #228]	@ (800093c <display_SEG_C+0x22c>)
 8000858:	f000 ff76 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b06      	cmp	r3, #6
 8000860:	d117      	bne.n	8000892 <display_SEG_C+0x182>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000868:	4834      	ldr	r0, [pc, #208]	@ (800093c <display_SEG_C+0x22c>)
 800086a:	f000 ff6d 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	4831      	ldr	r0, [pc, #196]	@ (800093c <display_SEG_C+0x22c>)
 8000876:	f000 ff67 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000880:	482e      	ldr	r0, [pc, #184]	@ (800093c <display_SEG_C+0x22c>)
 8000882:	f000 ff61 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800088c:	482b      	ldr	r0, [pc, #172]	@ (800093c <display_SEG_C+0x22c>)
 800088e:	f000 ff5b 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b07      	cmp	r3, #7
 8000896:	d117      	bne.n	80008c8 <display_SEG_C+0x1b8>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800089e:	4827      	ldr	r0, [pc, #156]	@ (800093c <display_SEG_C+0x22c>)
 80008a0:	f000 ff52 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008aa:	4824      	ldr	r0, [pc, #144]	@ (800093c <display_SEG_C+0x22c>)
 80008ac:	f000 ff4c 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008b6:	4821      	ldr	r0, [pc, #132]	@ (800093c <display_SEG_C+0x22c>)
 80008b8:	f000 ff46 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c2:	481e      	ldr	r0, [pc, #120]	@ (800093c <display_SEG_C+0x22c>)
 80008c4:	f000 ff40 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d117      	bne.n	80008fe <display_SEG_C+0x1ee>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d4:	4819      	ldr	r0, [pc, #100]	@ (800093c <display_SEG_C+0x22c>)
 80008d6:	f000 ff37 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008e0:	4816      	ldr	r0, [pc, #88]	@ (800093c <display_SEG_C+0x22c>)
 80008e2:	f000 ff31 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ec:	4813      	ldr	r0, [pc, #76]	@ (800093c <display_SEG_C+0x22c>)
 80008ee:	f000 ff2b 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008f8:	4810      	ldr	r0, [pc, #64]	@ (800093c <display_SEG_C+0x22c>)
 80008fa:	f000 ff25 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d117      	bne.n	8000934 <display_SEG_C+0x224>
		HAL_GPIO_WritePin(SEG_C_1_GPIO_Port, SEG_C_1_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <display_SEG_C+0x22c>)
 800090c:	f000 ff1c 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_2_GPIO_Port, SEG_C_2_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000916:	4809      	ldr	r0, [pc, #36]	@ (800093c <display_SEG_C+0x22c>)
 8000918:	f000 ff16 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_3_GPIO_Port, SEG_C_3_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <display_SEG_C+0x22c>)
 8000924:	f000 ff10 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_4_GPIO_Port, SEG_C_4_Pin, SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092e:	4803      	ldr	r0, [pc, #12]	@ (800093c <display_SEG_C+0x22c>)
 8000930:	f000 ff0a 	bl	8001748 <HAL_GPIO_WritePin>
	}
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40010c00 	.word	0x40010c00

08000940 <display_SEG_D>:

void display_SEG_D(int counter) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	//led display number 0
	if (counter == 0) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d117      	bne.n	800097e <display_SEG_D+0x3e>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000954:	4885      	ldr	r0, [pc, #532]	@ (8000b6c <display_SEG_D+0x22c>)
 8000956:	f000 fef7 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000960:	4882      	ldr	r0, [pc, #520]	@ (8000b6c <display_SEG_D+0x22c>)
 8000962:	f000 fef1 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800096c:	487f      	ldr	r0, [pc, #508]	@ (8000b6c <display_SEG_D+0x22c>)
 800096e:	f000 feeb 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000978:	487c      	ldr	r0, [pc, #496]	@ (8000b6c <display_SEG_D+0x22c>)
 800097a:	f000 fee5 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 1
	if (counter == 1) {
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d117      	bne.n	80009b4 <display_SEG_D+0x74>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800098a:	4878      	ldr	r0, [pc, #480]	@ (8000b6c <display_SEG_D+0x22c>)
 800098c:	f000 fedc 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000996:	4875      	ldr	r0, [pc, #468]	@ (8000b6c <display_SEG_D+0x22c>)
 8000998:	f000 fed6 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a2:	4872      	ldr	r0, [pc, #456]	@ (8000b6c <display_SEG_D+0x22c>)
 80009a4:	f000 fed0 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ae:	486f      	ldr	r0, [pc, #444]	@ (8000b6c <display_SEG_D+0x22c>)
 80009b0:	f000 feca 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 2
	if (counter == 2) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d117      	bne.n	80009ea <display_SEG_D+0xaa>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c0:	486a      	ldr	r0, [pc, #424]	@ (8000b6c <display_SEG_D+0x22c>)
 80009c2:	f000 fec1 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009cc:	4867      	ldr	r0, [pc, #412]	@ (8000b6c <display_SEG_D+0x22c>)
 80009ce:	f000 febb 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d8:	4864      	ldr	r0, [pc, #400]	@ (8000b6c <display_SEG_D+0x22c>)
 80009da:	f000 feb5 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009e4:	4861      	ldr	r0, [pc, #388]	@ (8000b6c <display_SEG_D+0x22c>)
 80009e6:	f000 feaf 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 3
	if (counter == 3) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d117      	bne.n	8000a20 <display_SEG_D+0xe0>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f6:	485d      	ldr	r0, [pc, #372]	@ (8000b6c <display_SEG_D+0x22c>)
 80009f8:	f000 fea6 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	485a      	ldr	r0, [pc, #360]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a04:	f000 fea0 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0e:	4857      	ldr	r0, [pc, #348]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a10:	f000 fe9a 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a1a:	4854      	ldr	r0, [pc, #336]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a1c:	f000 fe94 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 4
	if (counter == 4) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d117      	bne.n	8000a56 <display_SEG_D+0x116>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2c:	484f      	ldr	r0, [pc, #316]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a2e:	f000 fe8b 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a38:	484c      	ldr	r0, [pc, #304]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a3a:	f000 fe85 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a44:	4849      	ldr	r0, [pc, #292]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a46:	f000 fe7f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a50:	4846      	ldr	r0, [pc, #280]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a52:	f000 fe79 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 5
	if (counter == 5) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d117      	bne.n	8000a8c <display_SEG_D+0x14c>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a62:	4842      	ldr	r0, [pc, #264]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a64:	f000 fe70 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6e:	483f      	ldr	r0, [pc, #252]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a70:	f000 fe6a 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a7a:	483c      	ldr	r0, [pc, #240]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a7c:	f000 fe64 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a86:	4839      	ldr	r0, [pc, #228]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a88:	f000 fe5e 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 6
	if (counter == 6) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d117      	bne.n	8000ac2 <display_SEG_D+0x182>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a98:	4834      	ldr	r0, [pc, #208]	@ (8000b6c <display_SEG_D+0x22c>)
 8000a9a:	f000 fe55 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa4:	4831      	ldr	r0, [pc, #196]	@ (8000b6c <display_SEG_D+0x22c>)
 8000aa6:	f000 fe4f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ab0:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <display_SEG_D+0x22c>)
 8000ab2:	f000 fe49 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abc:	482b      	ldr	r0, [pc, #172]	@ (8000b6c <display_SEG_D+0x22c>)
 8000abe:	f000 fe43 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 7
	if (counter == 7) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d117      	bne.n	8000af8 <display_SEG_D+0x1b8>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ace:	4827      	ldr	r0, [pc, #156]	@ (8000b6c <display_SEG_D+0x22c>)
 8000ad0:	f000 fe3a 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ada:	4824      	ldr	r0, [pc, #144]	@ (8000b6c <display_SEG_D+0x22c>)
 8000adc:	f000 fe34 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae6:	4821      	ldr	r0, [pc, #132]	@ (8000b6c <display_SEG_D+0x22c>)
 8000ae8:	f000 fe2e 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000af2:	481e      	ldr	r0, [pc, #120]	@ (8000b6c <display_SEG_D+0x22c>)
 8000af4:	f000 fe28 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 8
	if (counter == 8) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b08      	cmp	r3, #8
 8000afc:	d117      	bne.n	8000b2e <display_SEG_D+0x1ee>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b04:	4819      	ldr	r0, [pc, #100]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b06:	f000 fe1f 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b10:	4816      	ldr	r0, [pc, #88]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b12:	f000 fe19 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b1c:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b1e:	f000 fe13 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b28:	4810      	ldr	r0, [pc, #64]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b2a:	f000 fe0d 	bl	8001748 <HAL_GPIO_WritePin>
	}
	//led display number 9
	if (counter == 9) {
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b09      	cmp	r3, #9
 8000b32:	d117      	bne.n	8000b64 <display_SEG_D+0x224>
		HAL_GPIO_WritePin(SEG_D_1_GPIO_Port, SEG_D_1_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3a:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b3c:	f000 fe04 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_2_GPIO_Port, SEG_D_2_Pin, RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b46:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b48:	f000 fdfe 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_3_GPIO_Port, SEG_D_3_Pin, RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b54:	f000 fdf8 	bl	8001748 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_4_GPIO_Port, SEG_D_4_Pin, SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b5e:	4803      	ldr	r0, [pc, #12]	@ (8000b6c <display_SEG_D+0x22c>)
 8000b60:	f000 fdf2 	bl	8001748 <HAL_GPIO_WritePin>
	}
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <update7SEG_AB>:

void update7SEG_AB(int data){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	display_SEG_A(data / 10);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <update7SEG_AB+0x44>)
 8000b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b80:	1092      	asrs	r2, r2, #2
 8000b82:	17db      	asrs	r3, r3, #31
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fbe2 	bl	8000350 <display_SEG_A>
	display_SEG_B(data % 10);
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <update7SEG_AB+0x44>)
 8000b90:	fb83 1302 	smull	r1, r3, r3, r2
 8000b94:	1099      	asrs	r1, r3, #2
 8000b96:	17d3      	asrs	r3, r2, #31
 8000b98:	1ac9      	subs	r1, r1, r3
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	1ad1      	subs	r1, r2, r3
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	f7ff fcc3 	bl	8000530 <display_SEG_B>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	66666667 	.word	0x66666667

08000bb8 <update7SEG_CD>:

void update7SEG_CD(int data){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	display_SEG_C(data / 10);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <update7SEG_CD+0x44>)
 8000bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc8:	1092      	asrs	r2, r2, #2
 8000bca:	17db      	asrs	r3, r3, #31
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fd9e 	bl	8000710 <display_SEG_C>
	display_SEG_D(data % 10);
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <update7SEG_CD+0x44>)
 8000bd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000bdc:	1099      	asrs	r1, r3, #2
 8000bde:	17d3      	asrs	r3, r2, #31
 8000be0:	1ac9      	subs	r1, r1, r3
 8000be2:	460b      	mov	r3, r1
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	1ad1      	subs	r1, r2, r3
 8000bec:	4608      	mov	r0, r1
 8000bee:	f7ff fea7 	bl	8000940 <display_SEG_D>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	66666667 	.word	0x66666667

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fab4 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f80e 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 f894 	bl	8000d38 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c10:	f000 f846 	bl	8000ca0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <main+0x24>)
 8000c16:	f001 f9dd 	bl	8001fd4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initValues();
 8000c1a:	f7ff fb77 	bl	800030c <initValues>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_automatic_run();
 8000c1e:	f7ff fa95 	bl	800014c <fsm_automatic_run>
 8000c22:	e7fc      	b.n	8000c1e <main+0x1e>
 8000c24:	20000040 	.word	0x20000040

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b090      	sub	sp, #64	@ 0x40
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	2228      	movs	r2, #40	@ 0x28
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 fd58 	bl	80026ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c52:	2310      	movs	r3, #16
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fd8a 	bl	8001778 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c6a:	f000 f8c5 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fff8 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c92:	f000 f8b1 	bl	8000df8 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3740      	adds	r7, #64	@ 0x40
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cc6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cd4:	2209      	movs	r2, #9
 8000cd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000ce6:	f001 f925 	bl	8001f34 <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cf0:	f000 f882 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000d02:	f001 faa3 	bl	800224c <HAL_TIM_ConfigClockSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f000 f874 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_TIM2_Init+0x94>)
 8000d1e:	f001 fc7b 	bl	8002618 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f000 f866 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000040 	.word	0x20000040

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <MX_GPIO_Init+0xa0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <MX_GPIO_Init+0xa0>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_GPIO_Init+0xa0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_GPIO_Init+0xa0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd8 <MX_GPIO_Init+0xa0>)
 8000d6a:	f043 0308 	orr.w	r3, r3, #8
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_GPIO_Init+0xa0>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f24e 017e 	movw	r1, #57470	@ 0xe07e
 8000d82:	4816      	ldr	r0, [pc, #88]	@ (8000ddc <MX_GPIO_Init+0xa4>)
 8000d84:	f000 fce0 	bl	8001748 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|BUTTON_1_Pin|BUTTON_2_Pin
                          |BUTTON_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_A_1_Pin|SEG_A_2_Pin|SEG_A_3_Pin|SEG_C_3_Pin
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d8e:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <MX_GPIO_Init+0xa8>)
 8000d90:	f000 fcda 	bl	8001748 <HAL_GPIO_WritePin>
                          |SEG_B_3_Pin|SEG_B_4_Pin|SEG_C_1_Pin|SEG_C_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin BUTTON_1_Pin BUTTON_2_Pin
                           BUTTON_3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8000d94:	f24e 037e 	movw	r3, #57470	@ 0xe07e
 8000d98:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|BUTTON_1_Pin|BUTTON_2_Pin
                          |BUTTON_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <MX_GPIO_Init+0xa4>)
 8000dae:	f000 fb4f 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_A_1_Pin SEG_A_2_Pin SEG_A_3_Pin SEG_C_3_Pin
                           SEG_C_4_Pin SEG_D_1_Pin SEG_D_2_Pin SEG_D_3_Pin
                           SEG_D_4_Pin SEG_A_4_Pin SEG_B_1_Pin SEG_B_2_Pin
                           SEG_B_3_Pin SEG_B_4_Pin SEG_C_1_Pin SEG_C_2_Pin */
  GPIO_InitStruct.Pin = SEG_A_1_Pin|SEG_A_2_Pin|SEG_A_3_Pin|SEG_C_3_Pin
 8000db2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db6:	60bb      	str	r3, [r7, #8]
                          |SEG_C_4_Pin|SEG_D_1_Pin|SEG_D_2_Pin|SEG_D_3_Pin
                          |SEG_D_4_Pin|SEG_A_4_Pin|SEG_B_1_Pin|SEG_B_2_Pin
                          |SEG_B_3_Pin|SEG_B_4_Pin|SEG_C_1_Pin|SEG_C_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_GPIO_Init+0xa8>)
 8000dcc:	f000 fb40 	bl	8001450 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40010c00 	.word	0x40010c00

08000de4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	timerRun();
 8000dec:	f000 f842 	bl	8000e74 <timerRun>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <setTimer1>:
int timer2_counter = 0;

int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration) {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <setTimer1+0x2c>)
 8000e10:	fb82 1203 	smull	r1, r2, r2, r3
 8000e14:	1092      	asrs	r2, r2, #2
 8000e16:	17db      	asrs	r3, r3, #31
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <setTimer1+0x30>)
 8000e1c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <setTimer1+0x34>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	66666667 	.word	0x66666667
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	20000088 	.word	0x20000088

08000e3c <setTimer2>:

void setTimer2(int duration) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <setTimer2+0x2c>)
 8000e48:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4c:	1092      	asrs	r2, r2, #2
 8000e4e:	17db      	asrs	r3, r3, #31
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <setTimer2+0x30>)
 8000e54:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <setTimer2+0x34>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	66666667 	.word	0x66666667
 8000e6c:	20000094 	.word	0x20000094
 8000e70:	20000090 	.word	0x20000090

08000e74 <timerRun>:
void setTimer3(int duration) {
	timer3_counter = duration / TIMER_CYCLE;
	timer3_flag = 0;
}

void timerRun() {
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000e78:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <timerRun+0x6c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dd0b      	ble.n	8000e98 <timerRun+0x24>
		timer1_counter--;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <timerRun+0x6c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	4a16      	ldr	r2, [pc, #88]	@ (8000ee0 <timerRun+0x6c>)
 8000e88:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <timerRun+0x6c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <timerRun+0x24>
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <timerRun+0x70>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
	}

	if (timer2_counter > 0) {
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <timerRun+0x74>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	dd0b      	ble.n	8000eb8 <timerRun+0x44>
		timer2_counter--;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <timerRun+0x74>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a10      	ldr	r2, [pc, #64]	@ (8000ee8 <timerRun+0x74>)
 8000ea8:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <timerRun+0x74>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <timerRun+0x44>
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <timerRun+0x78>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
	}

	if (timer3_counter > 0) {
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <timerRun+0x7c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	dd0b      	ble.n	8000ed8 <timerRun+0x64>
		timer3_counter--;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <timerRun+0x7c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <timerRun+0x7c>)
 8000ec8:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <timerRun+0x7c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <timerRun+0x64>
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <timerRun+0x80>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
	}
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	2000008c 	.word	0x2000008c
 8000ee4:	20000088 	.word	0x20000088
 8000ee8:	20000094 	.word	0x20000094
 8000eec:	20000090 	.word	0x20000090
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	20000098 	.word	0x20000098

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_MspInit+0x5c>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <HAL_MspInit+0x5c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_MspInit+0x5c>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_MspInit+0x5c>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <HAL_MspInit+0x5c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_MspInit+0x5c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_MspInit+0x60>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_MspInit+0x60>)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010000 	.word	0x40010000

08000f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f6c:	d113      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	61d3      	str	r3, [r2, #28]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x44>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	201c      	movs	r0, #28
 8000f8c:	f000 fa29 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f90:	201c      	movs	r0, #28
 8000f92:	f000 fa42 	bl	800141a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <NMI_Handler+0x4>

08000fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f902 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <TIM2_IRQHandler+0x10>)
 8001002:	f001 f833 	bl	800206c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000040 	.word	0x20000040

08001010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <OnRed_1>:
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
}

void OnRed_1(){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <OnRed_1+0x28>)
 8001026:	f000 fb8f 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2104      	movs	r1, #4
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <OnRed_1+0x28>)
 8001030:	f000 fb8a 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	4802      	ldr	r0, [pc, #8]	@ (8001044 <OnRed_1+0x28>)
 800103a:	f000 fb85 	bl	8001748 <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40010800 	.word	0x40010800

08001048 <OnYellow_1>:

void OnYellow_1(){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2102      	movs	r1, #2
 8001050:	4807      	ldr	r0, [pc, #28]	@ (8001070 <OnYellow_1+0x28>)
 8001052:	f000 fb79 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2104      	movs	r1, #4
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <OnYellow_1+0x28>)
 800105c:	f000 fb74 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2108      	movs	r1, #8
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <OnYellow_1+0x28>)
 8001066:	f000 fb6f 	bl	8001748 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40010800 	.word	0x40010800

08001074 <OnGreen_1>:

void OnGreen_1(){
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <OnGreen_1+0x28>)
 800107e:	f000 fb63 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2104      	movs	r1, #4
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <OnGreen_1+0x28>)
 8001088:	f000 fb5e 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2108      	movs	r1, #8
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <OnGreen_1+0x28>)
 8001092:	f000 fb59 	bl	8001748 <HAL_GPIO_WritePin>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40010800 	.word	0x40010800

080010a0 <OnRed_2>:

void OnRed_2(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2110      	movs	r1, #16
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <OnRed_2+0x28>)
 80010aa:	f000 fb4d 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <OnRed_2+0x28>)
 80010b4:	f000 fb48 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2140      	movs	r1, #64	@ 0x40
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <OnRed_2+0x28>)
 80010be:	f000 fb43 	bl	8001748 <HAL_GPIO_WritePin>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010800 	.word	0x40010800

080010cc <OnYellow_2>:

void OnYellow_2(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <OnYellow_2+0x28>)
 80010d6:	f000 fb37 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <OnYellow_2+0x28>)
 80010e0:	f000 fb32 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	@ 0x40
 80010e8:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <OnYellow_2+0x28>)
 80010ea:	f000 fb2d 	bl	8001748 <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40010800 	.word	0x40010800

080010f8 <OnGreen_2>:

void OnGreen_2(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2110      	movs	r1, #16
 8001100:	4807      	ldr	r0, [pc, #28]	@ (8001120 <OnGreen_2+0x28>)
 8001102:	f000 fb21 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <OnGreen_2+0x28>)
 800110c:	f000 fb1c 	bl	8001748 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <OnGreen_2+0x28>)
 8001116:	f000 fb17 	bl	8001748 <HAL_GPIO_WritePin>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40010800 	.word	0x40010800

08001124 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001124:	f7ff ff74 	bl	8001010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480b      	ldr	r0, [pc, #44]	@ (8001158 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800112a:	490c      	ldr	r1, [pc, #48]	@ (800115c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800112c:	4a0c      	ldr	r2, [pc, #48]	@ (8001160 <LoopFillZerobss+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a09      	ldr	r2, [pc, #36]	@ (8001164 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001140:	4c09      	ldr	r4, [pc, #36]	@ (8001168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114e:	f001 fad5 	bl	80026fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001152:	f7ff fd55 	bl	8000c00 <main>
  bx lr
 8001156:	4770      	bx	lr
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001160:	08002788 	.word	0x08002788
  ldr r2, =_sbss
 8001164:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001168:	200000a4 	.word	0x200000a4

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_Init+0x28>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_Init+0x28>)
 800117a:	f043 0310 	orr.w	r3, r3, #16
 800117e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f923 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	200f      	movs	r0, #15
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff feb4 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f93b 	bl	8001436 <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f903 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x1c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_IncTick+0x20>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a03      	ldr	r2, [pc, #12]	@ (800121c <HAL_IncTick+0x20>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	20000008 	.word	0x20000008
 800121c:	200000a0 	.word	0x200000a0

08001220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b02      	ldr	r3, [pc, #8]	@ (8001230 <HAL_GetTick+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	200000a0 	.word	0x200000a0

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4906      	ldr	r1, [pc, #24]	@ (80012cc <__NVIC_EnableIRQ+0x34>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	@ (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff90 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff2d 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff42 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff35 	bl	8001298 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b08b      	sub	sp, #44	@ 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e161      	b.n	8001728 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8150 	bne.w	8001722 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a97      	ldr	r2, [pc, #604]	@ (80016e4 <HAL_GPIO_Init+0x294>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d05e      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 800148c:	4a95      	ldr	r2, [pc, #596]	@ (80016e4 <HAL_GPIO_Init+0x294>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d875      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 8001492:	4a95      	ldr	r2, [pc, #596]	@ (80016e8 <HAL_GPIO_Init+0x298>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d058      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 8001498:	4a93      	ldr	r2, [pc, #588]	@ (80016e8 <HAL_GPIO_Init+0x298>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d86f      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 800149e:	4a93      	ldr	r2, [pc, #588]	@ (80016ec <HAL_GPIO_Init+0x29c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d052      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014a4:	4a91      	ldr	r2, [pc, #580]	@ (80016ec <HAL_GPIO_Init+0x29c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d869      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014aa:	4a91      	ldr	r2, [pc, #580]	@ (80016f0 <HAL_GPIO_Init+0x2a0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04c      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014b0:	4a8f      	ldr	r2, [pc, #572]	@ (80016f0 <HAL_GPIO_Init+0x2a0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d863      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014b6:	4a8f      	ldr	r2, [pc, #572]	@ (80016f4 <HAL_GPIO_Init+0x2a4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d046      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014bc:	4a8d      	ldr	r2, [pc, #564]	@ (80016f4 <HAL_GPIO_Init+0x2a4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d85d      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d82a      	bhi.n	800151c <HAL_GPIO_Init+0xcc>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d859      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014ca:	a201      	add	r2, pc, #4	@ (adr r2, 80014d0 <HAL_GPIO_Init+0x80>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001537 	.word	0x08001537
 80014dc:	08001579 	.word	0x08001579
 80014e0:	0800157f 	.word	0x0800157f
 80014e4:	0800157f 	.word	0x0800157f
 80014e8:	0800157f 	.word	0x0800157f
 80014ec:	0800157f 	.word	0x0800157f
 80014f0:	0800157f 	.word	0x0800157f
 80014f4:	0800157f 	.word	0x0800157f
 80014f8:	0800157f 	.word	0x0800157f
 80014fc:	0800157f 	.word	0x0800157f
 8001500:	0800157f 	.word	0x0800157f
 8001504:	0800157f 	.word	0x0800157f
 8001508:	0800157f 	.word	0x0800157f
 800150c:	0800157f 	.word	0x0800157f
 8001510:	0800157f 	.word	0x0800157f
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001541 	.word	0x08001541
 800151c:	4a76      	ldr	r2, [pc, #472]	@ (80016f8 <HAL_GPIO_Init+0x2a8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e029      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e024      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01f      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e01a      	b.n	8001580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e013      	b.n	8001580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e009      	b.n	8001580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e003      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x130>
          break;
 800157e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	@ 0xff
 8001584:	d801      	bhi.n	800158a <HAL_GPIO_Init+0x13a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e001      	b.n	800158e <HAL_GPIO_Init+0x13e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	@ 0xff
 8001594:	d802      	bhi.n	800159c <HAL_GPIO_Init+0x14c>
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x152>
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	3b08      	subs	r3, #8
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	210f      	movs	r1, #15
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a9 	beq.w	8001722 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	4b4a      	ldr	r3, [pc, #296]	@ (80016fc <HAL_GPIO_Init+0x2ac>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a49      	ldr	r2, [pc, #292]	@ (80016fc <HAL_GPIO_Init+0x2ac>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <HAL_GPIO_Init+0x2ac>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e8:	4a45      	ldr	r2, [pc, #276]	@ (8001700 <HAL_GPIO_Init+0x2b0>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3d      	ldr	r2, [pc, #244]	@ (8001704 <HAL_GPIO_Init+0x2b4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00d      	beq.n	8001630 <HAL_GPIO_Init+0x1e0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3c      	ldr	r2, [pc, #240]	@ (8001708 <HAL_GPIO_Init+0x2b8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d007      	beq.n	800162c <HAL_GPIO_Init+0x1dc>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3b      	ldr	r2, [pc, #236]	@ (800170c <HAL_GPIO_Init+0x2bc>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d101      	bne.n	8001628 <HAL_GPIO_Init+0x1d8>
 8001624:	2302      	movs	r3, #2
 8001626:	e004      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001628:	2303      	movs	r3, #3
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001630:	2300      	movs	r3, #0
 8001632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001642:	492f      	ldr	r1, [pc, #188]	@ (8001700 <HAL_GPIO_Init+0x2b0>)
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800165c:	4b2c      	ldr	r3, [pc, #176]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	492b      	ldr	r1, [pc, #172]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	4927      	ldr	r1, [pc, #156]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 8001674:	4013      	ands	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d006      	beq.n	8001692 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4921      	ldr	r1, [pc, #132]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	43db      	mvns	r3, r3
 800169a:	491d      	ldr	r1, [pc, #116]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 800169c:	4013      	ands	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d006      	beq.n	80016ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4917      	ldr	r1, [pc, #92]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4913      	ldr	r1, [pc, #76]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01f      	beq.n	8001714 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	490d      	ldr	r1, [pc, #52]	@ (8001710 <HAL_GPIO_Init+0x2c0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
 80016e0:	e01f      	b.n	8001722 <HAL_GPIO_Init+0x2d2>
 80016e2:	bf00      	nop
 80016e4:	10320000 	.word	0x10320000
 80016e8:	10310000 	.word	0x10310000
 80016ec:	10220000 	.word	0x10220000
 80016f0:	10210000 	.word	0x10210000
 80016f4:	10120000 	.word	0x10120000
 80016f8:	10110000 	.word	0x10110000
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	40010800 	.word	0x40010800
 8001708:	40010c00 	.word	0x40010c00
 800170c:	40011000 	.word	0x40011000
 8001710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_GPIO_Init+0x2f4>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4909      	ldr	r1, [pc, #36]	@ (8001744 <HAL_GPIO_Init+0x2f4>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f ae96 	bne.w	8001464 <HAL_GPIO_Init+0x14>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	@ 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	611a      	str	r2, [r3, #16]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e272      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8087 	beq.w	80018a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001798:	4b92      	ldr	r3, [pc, #584]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d00c      	beq.n	80017be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a4:	4b8f      	ldr	r3, [pc, #572]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d112      	bne.n	80017d6 <HAL_RCC_OscConfig+0x5e>
 80017b0:	4b8c      	ldr	r3, [pc, #560]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017bc:	d10b      	bne.n	80017d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017be:	4b89      	ldr	r3, [pc, #548]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d06c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x12c>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d168      	bne.n	80018a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e24c      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x76>
 80017e0:	4b80      	ldr	r3, [pc, #512]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a7f      	ldr	r2, [pc, #508]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	e02e      	b.n	800184c <HAL_RCC_OscConfig+0xd4>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x98>
 80017f6:	4b7b      	ldr	r3, [pc, #492]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a7a      	ldr	r2, [pc, #488]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b78      	ldr	r3, [pc, #480]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a77      	ldr	r2, [pc, #476]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001808:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e01d      	b.n	800184c <HAL_RCC_OscConfig+0xd4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0xbc>
 800181a:	4b72      	ldr	r3, [pc, #456]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a71      	ldr	r2, [pc, #452]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b6f      	ldr	r3, [pc, #444]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6e      	ldr	r2, [pc, #440]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0xd4>
 8001834:	4b6b      	ldr	r3, [pc, #428]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a6a      	ldr	r2, [pc, #424]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800183a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b68      	ldr	r3, [pc, #416]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a67      	ldr	r2, [pc, #412]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800184a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fce4 	bl	8001220 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fce0 	bl	8001220 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	@ 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e200      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b5d      	ldr	r3, [pc, #372]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0xe4>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fcd0 	bl	8001220 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fccc 	bl	8001220 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1ec      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x10c>
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d063      	beq.n	800197a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	4b4c      	ldr	r3, [pc, #304]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018be:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d11c      	bne.n	8001904 <HAL_RCC_OscConfig+0x18c>
 80018ca:	4b46      	ldr	r3, [pc, #280]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <HAL_RCC_OscConfig+0x176>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e1c0      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ee:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4939      	ldr	r1, [pc, #228]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	e03a      	b.n	800197a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190c:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fc85 	bl	8001220 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff fc81 	bl	8001220 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1a1      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4927      	ldr	r1, [pc, #156]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b26      	ldr	r3, [pc, #152]	@ (80019e8 <HAL_RCC_OscConfig+0x270>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fc64 	bl	8001220 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195c:	f7ff fc60 	bl	8001220 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e180      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d03a      	beq.n	80019fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d019      	beq.n	80019c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fc44 	bl	8001220 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fc40 	bl	8001220 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e160      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f000 fa9c 	bl	8001ef8 <RCC_Delay>
 80019c0:	e01c      	b.n	80019fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_RCC_OscConfig+0x274>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff fc2a 	bl	8001220 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ce:	e00f      	b.n	80019f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff fc26 	bl	8001220 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d908      	bls.n	80019f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e146      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000
 80019e8:	42420000 	.word	0x42420000
 80019ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	4b92      	ldr	r3, [pc, #584]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e9      	bne.n	80019d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a6 	beq.w	8001b56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10d      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b88      	ldr	r3, [pc, #544]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a87      	ldr	r2, [pc, #540]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b85      	ldr	r3, [pc, #532]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a32:	2301      	movs	r3, #1
 8001a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	4b82      	ldr	r3, [pc, #520]	@ (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d118      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a42:	4b7f      	ldr	r3, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7e      	ldr	r2, [pc, #504]	@ (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fbe7 	bl	8001220 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fbe3 	bl	8001220 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	@ 0x64
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e103      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	4b75      	ldr	r3, [pc, #468]	@ (8001c40 <HAL_RCC_OscConfig+0x4c8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x312>
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a6e      	ldr	r2, [pc, #440]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6213      	str	r3, [r2, #32]
 8001a88:	e02d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x36e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x334>
 8001a92:	4b6a      	ldr	r3, [pc, #424]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a69      	ldr	r2, [pc, #420]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	4b67      	ldr	r3, [pc, #412]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	e01c      	b.n	8001ae6 <HAL_RCC_OscConfig+0x36e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b05      	cmp	r3, #5
 8001ab2:	d10c      	bne.n	8001ace <HAL_RCC_OscConfig+0x356>
 8001ab4:	4b61      	ldr	r3, [pc, #388]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a60      	ldr	r2, [pc, #384]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	e00b      	b.n	8001ae6 <HAL_RCC_OscConfig+0x36e>
 8001ace:	4b5b      	ldr	r3, [pc, #364]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f023 0301 	bic.w	r3, r3, #1
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	4b58      	ldr	r3, [pc, #352]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a57      	ldr	r2, [pc, #348]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d015      	beq.n	8001b1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fb97 	bl	8001220 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fb93 	bl	8001220 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0b1      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ee      	beq.n	8001af6 <HAL_RCC_OscConfig+0x37e>
 8001b18:	e014      	b.n	8001b44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fb81 	bl	8001220 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7ff fb7d 	bl	8001220 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e09b      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b38:	4b40      	ldr	r3, [pc, #256]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ee      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d105      	bne.n	8001b56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b60:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d061      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d146      	bne.n	8001c02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fb51 	bl	8001220 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff fb4d 	bl	8001220 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e06d      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4921      	ldr	r1, [pc, #132]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a19      	ldr	r1, [r3, #32]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	491b      	ldr	r1, [pc, #108]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_RCC_OscConfig+0x4cc>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff fb21 	bl	8001220 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff fb1d 	bl	8001220 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e03d      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46a>
 8001c00:	e035      	b.n	8001c6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_RCC_OscConfig+0x4cc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb0a 	bl	8001220 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff fb06 	bl	8001220 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e026      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x498>
 8001c2e:	e01e      	b.n	8001c6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e019      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_RCC_OscConfig+0x500>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0d0      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b6a      	ldr	r3, [pc, #424]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d910      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b67      	ldr	r3, [pc, #412]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	4965      	ldr	r1, [pc, #404]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ce2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d040      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3a:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e073      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e06b      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5a:	4b39      	ldr	r3, [pc, #228]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f023 0203 	bic.w	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4936      	ldr	r1, [pc, #216]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6c:	f7ff fa58 	bl	8001220 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7ff fa54 	bl	8001220 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e053      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 020c 	and.w	r2, r3, #12
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d1eb      	bne.n	8001d74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d210      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4922      	ldr	r1, [pc, #136]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 f821 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	@ (8001e44 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <HAL_RCC_ClockConfig+0x1cc>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <HAL_RCC_ClockConfig+0x1d0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f9b6 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40022000 	.word	0x40022000
 8001e40:	40021000 	.word	0x40021000
 8001e44:	0800275c 	.word	0x0800275c
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d002      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x30>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d003      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x36>
 8001e7e:	e027      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e80:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e82:	613b      	str	r3, [r7, #16]
      break;
 8001e84:	e027      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	0c9b      	lsrs	r3, r3, #18
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	4a17      	ldr	r2, [pc, #92]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e90:	5cd3      	ldrb	r3, [r2, r3]
 8001e92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d010      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	0c5b      	lsrs	r3, r3, #17
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eb2:	fb03 f202 	mul.w	r2, r3, r2
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e004      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	613b      	str	r3, [r7, #16]
      break;
 8001ece:	e002      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ed2:	613b      	str	r3, [r7, #16]
      break;
 8001ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed6:	693b      	ldr	r3, [r7, #16]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	007a1200 	.word	0x007a1200
 8001eec:	0800276c 	.word	0x0800276c
 8001ef0:	0800277c 	.word	0x0800277c
 8001ef4:	003d0900 	.word	0x003d0900

08001ef8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <RCC_Delay+0x34>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <RCC_Delay+0x38>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0a5b      	lsrs	r3, r3, #9
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f14:	bf00      	nop
  }
  while (Delay --);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	60fa      	str	r2, [r7, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f9      	bne.n	8001f14 <RCC_Delay+0x1c>
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	10624dd3 	.word	0x10624dd3

08001f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e041      	b.n	8001fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fffe 	bl	8000f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 fa56 	bl	8002424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e035      	b.n	8002058 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <HAL_TIM_Base_Start_IT+0x90>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_TIM_Base_Start_IT+0x4e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002016:	d004      	beq.n	8002022 <HAL_TIM_Base_Start_IT+0x4e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <HAL_TIM_Base_Start_IT+0x94>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d111      	bne.n	8002046 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b06      	cmp	r3, #6
 8002032:	d010      	beq.n	8002056 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002044:	e007      	b.n	8002056 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40000400 	.word	0x40000400

0800206c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d020      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0202 	mvn.w	r2, #2
 80020a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f998 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f98b 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f99a 	bl	80023fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d020      	beq.n	800211c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0204 	mvn.w	r2, #4
 80020ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f972 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f965 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f974 	bl	80023fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d020      	beq.n	8002168 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0208 	mvn.w	r2, #8
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f94c 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f93f 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f94e 	bl	80023fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d020      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0210 	mvn.w	r2, #16
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2208      	movs	r2, #8
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f926 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f919 	bl	80023da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f928 	bl	80023fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00c      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0201 	mvn.w	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fe06 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa6f 	bl	80026da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00c      	beq.n	8002220 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8f8 	bl	8002410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0320 	and.w	r3, r3, #32
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0220 	mvn.w	r2, #32
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa42 	bl	80026c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_TIM_ConfigClockSource+0x1c>
 8002264:	2302      	movs	r3, #2
 8002266:	e0b4      	b.n	80023d2 <HAL_TIM_ConfigClockSource+0x186>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800228e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022a0:	d03e      	beq.n	8002320 <HAL_TIM_ConfigClockSource+0xd4>
 80022a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022a6:	f200 8087 	bhi.w	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ae:	f000 8086 	beq.w	80023be <HAL_TIM_ConfigClockSource+0x172>
 80022b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b6:	d87f      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022b8:	2b70      	cmp	r3, #112	@ 0x70
 80022ba:	d01a      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0xa6>
 80022bc:	2b70      	cmp	r3, #112	@ 0x70
 80022be:	d87b      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022c0:	2b60      	cmp	r3, #96	@ 0x60
 80022c2:	d050      	beq.n	8002366 <HAL_TIM_ConfigClockSource+0x11a>
 80022c4:	2b60      	cmp	r3, #96	@ 0x60
 80022c6:	d877      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022c8:	2b50      	cmp	r3, #80	@ 0x50
 80022ca:	d03c      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0xfa>
 80022cc:	2b50      	cmp	r3, #80	@ 0x50
 80022ce:	d873      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b40      	cmp	r3, #64	@ 0x40
 80022d2:	d058      	beq.n	8002386 <HAL_TIM_ConfigClockSource+0x13a>
 80022d4:	2b40      	cmp	r3, #64	@ 0x40
 80022d6:	d86f      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022d8:	2b30      	cmp	r3, #48	@ 0x30
 80022da:	d064      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022dc:	2b30      	cmp	r3, #48	@ 0x30
 80022de:	d86b      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d060      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d867      	bhi.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05c      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d05a      	beq.n	80023a6 <HAL_TIM_ConfigClockSource+0x15a>
 80022f0:	e062      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002302:	f000 f96a 	bl	80025da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	609a      	str	r2, [r3, #8]
      break;
 800231e:	e04f      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002330:	f000 f953 	bl	80025da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002342:	609a      	str	r2, [r3, #8]
      break;
 8002344:	e03c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	461a      	mov	r2, r3
 8002354:	f000 f8ca 	bl	80024ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2150      	movs	r1, #80	@ 0x50
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f921 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 8002364:	e02c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002372:	461a      	mov	r2, r3
 8002374:	f000 f8e8 	bl	8002548 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2160      	movs	r1, #96	@ 0x60
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f911 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 8002384:	e01c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	461a      	mov	r2, r3
 8002394:	f000 f8aa 	bl	80024ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2140      	movs	r1, #64	@ 0x40
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f901 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 80023a4:	e00c      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f000 f8f8 	bl	80025a6 <TIM_ITRx_SetConfig>
      break;
 80023b6:	e003      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e000      	b.n	80023c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
	...

08002424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a2b      	ldr	r2, [pc, #172]	@ (80024e4 <TIM_Base_SetConfig+0xc0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d007      	beq.n	800244c <TIM_Base_SetConfig+0x28>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002442:	d003      	beq.n	800244c <TIM_Base_SetConfig+0x28>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a28      	ldr	r2, [pc, #160]	@ (80024e8 <TIM_Base_SetConfig+0xc4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d108      	bne.n	800245e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <TIM_Base_SetConfig+0xc0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_Base_SetConfig+0x52>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246c:	d003      	beq.n	8002476 <TIM_Base_SetConfig+0x52>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1d      	ldr	r2, [pc, #116]	@ (80024e8 <TIM_Base_SetConfig+0xc4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d108      	bne.n	8002488 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800247c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <TIM_Base_SetConfig+0xc0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d103      	bne.n	80024bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f023 0201 	bic.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]
  }
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400

080024ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f023 0201 	bic.w	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 030a 	bic.w	r3, r3, #10
 8002528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	621a      	str	r2, [r3, #32]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f023 0210 	bic.w	r2, r3, #16
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	031b      	lsls	r3, r3, #12
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002584:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	621a      	str	r2, [r3, #32]
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f043 0307 	orr.w	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025da:	b480      	push	{r7}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	4313      	orrs	r3, r2
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	609a      	str	r2, [r3, #8]
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800262c:	2302      	movs	r3, #2
 800262e:	e041      	b.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267c:	d004      	beq.n	8002688 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10c      	bne.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800268e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	4313      	orrs	r3, r2
 8002698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400

080026c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <memset>:
 80026ec:	4603      	mov	r3, r0
 80026ee:	4402      	add	r2, r0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d100      	bne.n	80026f6 <memset+0xa>
 80026f4:	4770      	bx	lr
 80026f6:	f803 1b01 	strb.w	r1, [r3], #1
 80026fa:	e7f9      	b.n	80026f0 <memset+0x4>

080026fc <__libc_init_array>:
 80026fc:	b570      	push	{r4, r5, r6, lr}
 80026fe:	2600      	movs	r6, #0
 8002700:	4d0c      	ldr	r5, [pc, #48]	@ (8002734 <__libc_init_array+0x38>)
 8002702:	4c0d      	ldr	r4, [pc, #52]	@ (8002738 <__libc_init_array+0x3c>)
 8002704:	1b64      	subs	r4, r4, r5
 8002706:	10a4      	asrs	r4, r4, #2
 8002708:	42a6      	cmp	r6, r4
 800270a:	d109      	bne.n	8002720 <__libc_init_array+0x24>
 800270c:	f000 f81a 	bl	8002744 <_init>
 8002710:	2600      	movs	r6, #0
 8002712:	4d0a      	ldr	r5, [pc, #40]	@ (800273c <__libc_init_array+0x40>)
 8002714:	4c0a      	ldr	r4, [pc, #40]	@ (8002740 <__libc_init_array+0x44>)
 8002716:	1b64      	subs	r4, r4, r5
 8002718:	10a4      	asrs	r4, r4, #2
 800271a:	42a6      	cmp	r6, r4
 800271c:	d105      	bne.n	800272a <__libc_init_array+0x2e>
 800271e:	bd70      	pop	{r4, r5, r6, pc}
 8002720:	f855 3b04 	ldr.w	r3, [r5], #4
 8002724:	4798      	blx	r3
 8002726:	3601      	adds	r6, #1
 8002728:	e7ee      	b.n	8002708 <__libc_init_array+0xc>
 800272a:	f855 3b04 	ldr.w	r3, [r5], #4
 800272e:	4798      	blx	r3
 8002730:	3601      	adds	r6, #1
 8002732:	e7f2      	b.n	800271a <__libc_init_array+0x1e>
 8002734:	08002780 	.word	0x08002780
 8002738:	08002780 	.word	0x08002780
 800273c:	08002780 	.word	0x08002780
 8002740:	08002784 	.word	0x08002784

08002744 <_init>:
 8002744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002746:	bf00      	nop
 8002748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274a:	bc08      	pop	{r3}
 800274c:	469e      	mov	lr, r3
 800274e:	4770      	bx	lr

08002750 <_fini>:
 8002750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002752:	bf00      	nop
 8002754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002756:	bc08      	pop	{r3}
 8002758:	469e      	mov	lr, r3
 800275a:	4770      	bx	lr
